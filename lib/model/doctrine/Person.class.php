<?php

/**
 * Person
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    SGArqBase
 * @subpackage model
 * @author     MSc. Donel Vazquez Zambrano
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Person extends sfPerson {

    public function isBossOf($person) {
        $result = $this->getId() == $person->getId();

        $parentids = array();

        $teamsleaded = $this->getTeamsImBoss();
        foreach ($teamsleaded as $teamleaded) {
            $childs = BaseTable::getAllChilds('Team', 'parentid', $teamleaded->getId(), true);
            $parentids = array_unique(array_merge($parentids, $childs['ids']));
        }

        $teamsleadedbyother = $person->getTeamsImBoss();
        foreach ($teamsleadedbyother as $teamleadedbyother)
            $result = $result ||
                    in_array($teamleadedbyother->getParentid(), $parentids) ||
                    in_array($teamleadedbyother->getId(), $parentids);


        $teamsbelongedbyother = $person->getTeamsIBelong();
        foreach ($teamsbelongedbyother as $teambelongedbyother)
            $result = $result ||
                    in_array($teambelongedbyother->getParentid(), $parentids) ||
                    in_array($teambelongedbyother->getId(), $parentids);


        return $result;
    }
    
    public function getBoss() {
        $persons = array();
        $superchief = false;

        $teamsleaded = $this->getTeamsImBoss();
        foreach ($teamsleaded as $teamleaded)
            if ($teamleaded->getTeam()->getId() > 0)
                $persons[] = $teamleaded->getTeam()->getResponsible();
            else
                $superchief = true;

        if (!$superchief) {
            $teamsbelonged = $this->getTeamsIBelong();
            foreach ($teamsbelonged as $teambelonged)
                $persons[] = $teambelonged->getResponsible();
        }

        $boss = $this;
        foreach ($persons as $person)
            if ($person->isBossOf($boss))
                $boss = $person;


        return $boss;
    }

    public function getProfileSchedule($entityid = false) {
        $schedule = false;
        $profile = json_decode($this->getProfile(), true);
        if ($profile && $profile['schedule']) {
            $schedule = new Schedule();
            $schedule->setIsActive(1);
            $schedule->setName($this->getSfGuardUser()->getFirstName() . ' ' . $this->getSfGuardUser()->getLastName());
            $schedule->setCode(Util::generateCode($schedule->getName()));
            $schedule->setSesions($profile['schedule']['sesions']);
            $schedule->setExceptions($profile['schedule']['exceptions']);
            return $schedule;
        } 
        else {
            $schedules = ScheduleTable::getInstance()->getActiveSchedule($entityid);
            if ($schedules && count($schedules) > 0)
                $schedule = $schedules[0];
        }
        
        return $schedule;
    }

}