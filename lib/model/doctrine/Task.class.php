<?php

/**
 * Task
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    SGArqBase
 * @subpackage model
 * @author     Donel Vazquez Zambrano
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Task extends BaseTask {

    const PREFIX_PERIODICALLY_TASK = 'PT->';
    const PREFIX_MULTIPARTICIPANT_TASK = 'MT->';
    const LIKE_COMPARITION_CODE = '"%->%"';

    public function getInheritParticipants() {
        if($this->getMultipartid() && $this->getMultipartid() > 0)
            return $this->getMultipart()->getParticipants();

        if($this->getSerialid() && $this->getSerialid() > 0)
            return $this->getSerial()->getParticipants();
        
        return $this->getParticipants();
    }
    
    public function generateCode() {
        $plansids = '';
        foreach ($this->getPlans() as $plan) 
            $plansids = $plansids . $plan->getId();

        $ak = Util::generateCode($this->getEvent()->getName() . $this->getResponsibleid() . $this->getEvent()->getStart() . $this->getEvent()->getEnd() . $this->getSerialid() . $this->getMultipartid() . $plansids);

        if ($this->getTasksInSerial()->count() > 0)
            $ak = self::PREFIX_PERIODICALLY_TASK . $ak;
        if ($this->getTasksInMultipart()->count() > 0)
            $ak = self::PREFIX_MULTIPARTICIPANT_TASK . $ak;

        return $ak;
    }

    public function getAsArray() {
        $result = $this->toArray();

        $result['Taskstatus'] = $this->getTaskstatus()->getAsArray();
        $result['Person'] = $this->getPerson()->getAsArray();
        $result['Creator'] = $this->getCreator()->getAsArray();
        $result['Event'] = $this->getEvent()->getAsArray();
        $result['Tasktype'] = $this->getTasktype()->getAsArray();
        $result['Local'] = $this->getLocal()->getAsArray();

        if ($this->getTask() && $this->getTask()->getId() > 0)
            $result['Task'] = $this->getTask()->getAsArray();

        return $result;
    }

    public function getAK($name = false, $responsableid = false, $start = false, $end = false) {
        if (!$name) {
            $name = 'NONAME' . rand(1, PHP_INT_MAX);
            if ($this->getEvent() && $this->getEvent()->getName() && $this->getEvent()->getName() != '')
                $name = $this->getEvent()->getName();
        }

        if (!$responsableid) {
            $responsableid = 'NONAME' . rand(1, PHP_INT_MAX);
            if ($this->getPerson() && $this->getPerson()->getId() > 0)
                $responsableid = $this->getPerson()->getId();
        }

        if (!$start) {
            $start = 'NONAME' . rand(1, PHP_INT_MAX);
            if ($this->getEvent() && $this->getEvent()->getStart())
                $start = $this->getEvent()->getStart();
        }

        if (!$end) {
            $end = 'NONAME' . rand(1, PHP_INT_MAX);
            if ($this->getEvent() && $this->getEvent()->getEnd())
                $end = $this->getEvent()->getEnd();
        }

        return Util::generateCode($name . $responsableid . $start . $end);
    }

    public static function getExcludeInvitationSubQuery() {
//        //patching FREYRE where this query takes tooo long and server max time expires for the tasks amount
        return '0';
//        return Task::getInvitationSubQuery():
    }

    public static function getInvitationSubQuery() {
        //return '0'; //patching FREYRE
        // building query for worst case of Team tree DEEP
        $deepresponsible = 'LEFT JOIN tib2.Team tp2 ON tib2.id = tp2.parentid LEFT JOIN tp2.Responsible r2 ON r2.id = tp2.responsibleid';
        $deepresponsiblewhere = 'tp2.responsibleid = t.responsibleid';
        $deepmember = 'LEFT JOIN tib3.Team tp3 ON tib3.id = tp3.parentid LEFT JOIN tp3.TeamPersonRelation tpr3 ON tp3.id = tpr3.teamid';
        $deepmemberwhere = 'tpr3.personid = t.responsibleid';
        for ($index = 1; $index <= Team::getMaxDeep(); $index++) {
            $previndex = '';
            if ($index > 1)
                $previndex = $index - 1;

            $deepresponsible .= ' LEFT JOIN tp2' . $previndex . '.Team tp2' . $index . ' ON tp2' . $previndex . '.id = tp2' . $index . '.parentid LEFT JOIN tp2' . $index . '.Responsible r2' . $index . ' ON r2' . $index . '.id = tp2' . $index . '.responsibleid';
            $deepresponsiblewhere .= ' OR tp2' . $index . '.responsibleid = t.responsibleid';

            $deepmember .= ' LEFT JOIN tp3' . $previndex . '.Team tp3' . $index . ' ON tp3' . $previndex . '.id = tp3' . $index . '.parentid LEFT JOIN tp3' . $index . '.TeamPersonRelation tpr3' . $index . ' ON tp3' . $index . '.id = tpr3' . $index . '.teamid';
            $deepmemberwhere .= ' OR tpr3' . $index . '.personid = t.responsibleid';
        }

        return '(t.created_by <> t.responsibleid AND 
                (SELECT COUNT(tsr.tostatus_id) FROM TaskstatusRelation tsr WHERE tsr.tostatus_id = ts.id) < 1 AND
                    /* if creator belong to a group leaded by responsible */
                    (SELECT COUNT(p1.id) 
                        FROM Person p1
                            LEFT JOIN p1.TeamsIBelong tib1 ON p1.id = tib1.responsibleid
                            LEFT JOIN tib1.TeamPersonRelation tpr1 ON tib1.id = tpr1.teamid
                            WHERE (p1.id = t.created_by AND tpr1.personid = t.responsibleid)
                    ) <> 1
                    AND 
                    /* if creator lead a group subordinated directly to a group leaded by responsible */
                    (SELECT COUNT(p2.id) 
                        FROM Person p2
                            LEFT JOIN p2.TeamsImBoss tib2 ON p2.id = tib2.responsibleid ' . $deepresponsible . '
                            WHERE (tib2.id = t.created_by AND (' . $deepresponsiblewhere . '))
                    ) <> 1
                    AND 
                    /* if creator belong to a group subordinated directly to a group leaded by responsible */
                    (SELECT COUNT(p3.id) 
                        FROM Person p3
                            LEFT JOIN p3.TeamsImBoss tib3 ON p3.id = tib3.responsibleid ' . $deepmember . '
                            WHERE (p3.id = t.created_by AND (' . $deepmemberwhere . '))
                    ) <> 1)';
    }

    public static function getInProgressSubQuery() {
        return 'e.code NOT LIKE ' . Task::LIKE_COMPARITION_CODE . ' AND e.start < "' . date('Y-m-d H:i:s') . '" AND e.end > "' . date('Y-m-d H:i:s') . '" AND t.finished is null';
    }

    public static function getOnTimeSubQuery() {
        return 'e.code NOT LIKE ' . Task::LIKE_COMPARITION_CODE . ' AND t.finished <= e.end';
    }

    public static function getOutOfTimeSubQuery() {
        return 'e.code NOT LIKE ' . Task::LIKE_COMPARITION_CODE . ' AND t.finished > e.end';
    }

    public static function getCommingSubQuery() {
        $date = date_create_from_format('Y-m-d H:i:s', date('Y-m-d H:i:s'));

        $days = Util::getMetadataValue('app_futuredaysamount');
        if ($days && $days > 0)
            $date->add(new DateInterval('P' . $days . 'D'));

        return 'e.code NOT LIKE ' . Task::LIKE_COMPARITION_CODE . ' AND e.start > "' . date('Y-m-d H:i:s') . '" AND e.start <= "' . $date->format('Y-m-d H:i:s') . chr(octdec('42'));
    }

    public static function getExpiredSubQuery() {
        return 'e.code NOT LIKE ' . Task::LIKE_COMPARITION_CODE . ' AND e.end < "' . date('Y-m-d H:i:s') . '" AND t.finished is null';
    }

}
