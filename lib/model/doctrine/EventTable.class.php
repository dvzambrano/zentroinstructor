<?php

/**
 * EventTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class EventTable extends sfEventTable {

    public static function formatData($array, $page, $count = false) {
        return array(
            'metaData' => array(
                'idProperty' => 'id',
                'root' => 'data',
                'totalProperty' => 'results',
                'fields' => array(
                    array('name' => 'id', 'type' => 'int'),
                    array('name' => 'code', 'type' => 'string'),
                    array('name' => 'name', 'type' => 'string'),
                    array('name' => 'comment', 'type' => 'string'),
                    array('name' => 'allday', 'type' => 'bool'),
                    array('name' => 'start', 'type' => 'date', 'dateFormat' => 'Y-m-d H:i:s'),
                    array('name' => 'end', 'type' => 'date', 'dateFormat' => 'Y-m-d H:i:s'),
                    array('name' => 'location', 'type' => 'string'),
                    array('name' => 'link', 'type' => 'string'),
                    array('name' => 'customicon', 'type' => 'string'),
                    array('name' => 'Task'),
                    array('name' => 'Locals')
                ),
                'sortInfo' => array(
                    'field' => 'id',
                    'direction' => 'ASC'
                )
            ),
            'success' => true,
            'message' => 'app.msg.info.loadedsuccessful',
            'results' => $count,
            'data' => $array->toArray(),
            'page' => $page
        );
    }

    public static function getAll($filters = array(), $simple = false) {
        $query = BaseTable::getAllPaged(self::table, 0, PHP_INT_MAX, $filters, array('t.Task r', 'r.Local rms', 'r.Taskstatus ts'), array(
                    array(
                        'field' => 'entityid',
                        'realfield' => 'entityid',
                        'char' => 'rms'
                    ), array(
                        'field' => 'responsibleid',
                        'realfield' => 'responsibleid',
                        'char' => 'r'
                        )), false, 'r.*, rms.*, ts.*');
        if ($simple)
            return $query['results'];
        return self::formatData($query['results'], $query['page'], $query['count']);
    }

    public static function getRebuilded($array = array()) {
        if ($array['code'] != '')
            $event = Doctrine::getTable('Event')->findByAK($array['code']);

        $reminder = Doctrine::getTable('Reminder')->getRebuilded($array['Reminder']);
        $calendar = Doctrine::getTable('Calendar')->getRebuilded($array['Calendar']);

        if (!$event) {
            $event = new Event();
            $event->fromArray($array);
            $event->save();
        }

        if ($reminder)
            $event->setReminder($reminder);
        if ($calendar)
            $event->setCalendar($calendar);

        $event->save();

        return $event;
    }

}