<?php

/**
 * title actions.
 *
 * @package    SGArqBase
 * @subpackage task
 * @author     Donel Vazquez Zambrano
 * @version    SVN: $Id: actions.class.php 12479 2008-10-31 10:54:40Z fabien $
 */
class taskActions extends sfBaseActions {

    public function executeRequest(sfWebRequest $request) {
        $response = array();
        try {
            switch ($request->getParameter('method')) {
                case 'importtasks': // importing task from other plans (father to son plan)
                    $this->importtasks($request);
                    $response = array('success' => true, 'message' => 'app.msg.info.savedsuccessful');
                    break;
                case 'getimportelements': // import task from file generated by "export plan to file"
                    $data = $this->getimportelements($request);
                    $response = array('success' => true, 'message' => 'app.msg.info.savedsuccessful', 'data' => $data);
                    break;
                case 'validaterange':
                    $response = $this->validaterange($request);
                    break;
                case 'presave':
                    $data = $this->presave($request);
                    $response = array('success' => true, 'message' => 'app.msg.info.savedsuccessful', 'data' => $data);
                    break;
                case 'gettaskelements':
                    $data = $this->gettaskelements($request);
                    $response = array('success' => true, 'message' => 'app.msg.info.savedsuccessful', 'data' => $data);
                    break;
                case 'explore':
                    $pks = json_decode(stripslashes($request->getParameter('ids')));
                    $response = TaskTable::getInstance()->exploreTasksInSerialANDInMultipart($pks);
                    $response = array('success' => true, 'message' => $response);
                    break;
                case 'test':
                    $json = '{"id":"20","name":"A","responsibleid":"2","creator":"1","tasktypeid":"1","taskstatusid":"6","tasklocalid":"2","percentage":"0","relateds":"[]","isprincipal":false,"activityorigin":"1","activitytype":"1","reminderid":"","manuallyprogrammed":true,"parentid":"","entityid":"8","plan":"1","frequencytype":null,"dailyRepetition":null,"weeklyRepetition":null,"monthlyRepetition":null,"yearlyRepetition":null,"breakingRepetition":null,"start":"18/11/2020 13:22:00","end":"19/11/2020 13:22:00","durationvalue":"24","durationtype":"H"}';
                    
                    $request->setParameter('element', $json);
                    $this->save($request);
                    die;
                    break;
                default:
                    return parent::executeRequest($request);
                    break;
            }
        } catch (Exception $e) {
            $response = array('success' => false, 'message' => $e->getMessage());
        }
        return $this->renderText(json_encode($response));
    }

    public function load(sfWebRequest $request) {
        $rows = array();
        $filter = $this->getFilter($request);

        switch ($request->getParameter('component')) {

            case 'combo':
                $rows = TaskTable::getInstance()->getAll($filter);
                break;

            case 'grid':
                $start = $request->getParameter('start');
                $limit = $request->getParameter('limit');

                /*
                // esta es la variante correcta pero como se cambio q las tareas padres -> ya salen en el plan puesto q son las principales del responsable hay q quitar la restriccion de ->
                // to hide serial base tasks
                $obj = new stdClass();
                $obj->type = "string";
                $obj->field = "code";
                $obj->comparison = "notlike";
                $obj->value = '->';
                $filter[] = $obj;
                */

                if ($request->getParameter('plan') && $request->getParameter('plan') != '' && $request->getParameter('plan') != 'false') {
                    $obj = new stdClass();
                    $obj->type = "int";
                    $obj->field = "planid";
                    $obj->comparison = "eq";
                    $obj->value = $request->getParameter('plan');
                    $filter[] = $obj;
                }

                if ($request->getParameter('plan') && $request->getParameter('plan') != 'false') {
                    $obj = new stdClass();
                    $obj->type = "int";
                    $obj->field = "planid";
                    $obj->comparison = "eq";
                    $obj->value = $request->getParameter('plan');
                    $filter[] = $obj;
                }
                if ($request->getParameter('person') && $request->getParameter('person') != 'false') {
                    $obj = new stdClass();
                    $obj->type = "int";
                    $obj->field = "responsibleid";
                    $obj->comparison = "eq";
                    $obj->value = $request->getParameter('person');
                    $filter[] = $obj;
                }

                if ($request->getParameter('time') && $request->getParameter('time') != '')
                    $rows = TaskTable::getInstance()->getAllPaged($start, $limit, $filter, false, $request->getParameter('time'));
                else
                    $rows = TaskTable::getInstance()->getAllPaged($start, $limit, $filter);

                $dictionary = array();
                if ($request->getParameter('renum') && $request->getParameter('renum') != '') {
                    foreach ($rows['data'] as $key => $value)
                        $dictionary[$value['id']] = $key;

                    foreach ($rows['data'] as $key => $value) {
                        $rows['data'][$key]['id'] = $dictionary[$value['id']];
                        if ($rows['data'][$key]['relateds'] && $rows['data'][$key]['relateds'] != '') {
                            $relateds = json_decode($rows['data'][$key]['relateds']);
                            for ($index = 0; $index < count($relateds); $index++)
                                $relateds[$index]->id = $dictionary[$relateds[$index]->id];
                            $rows['data'][$key]['relateds'] = json_encode($relateds);
                        }
                    }
                }

                break;

            case 'single':
                $filter = array();
                $obj = new stdClass();
                $obj->type = "int";
                $obj->field = "id";
                $obj->comparison = "eq";
                $obj->value = $request->getParameter('id');
                $filter[] = $obj;

                $rows = TaskTable::getInstance()->getAllPaged(0, 1, $filter);
                break;

            case 'summary':
                $id = false;
                if ($request->getParameter('id') && $request->getParameter('id') != '')
                    $id = $request->getParameter('id');
                $rows = TaskTable::getInstance()->getSummary($id);
                break;

            default:
                break;
        }

        return $rows;
    }

    public function copyTask($task, $unsets = array()) {
        foreach ($unsets as $unset)
            unset($task[$unset]);
        return $task;
    }
    public function presave(sfWebRequest $request) {
        $tasks = array();
        $subtasks = array();

        $sender = Doctrine::getTable('sfGuardUser')->retrieveByUsername($this->getUser()->getUsername());

        $template = array(
            'id' => $request->getParameter('id'),
            'name' => $request->getParameter('name'),
            'responsibleid' => $request->getParameter('responsible_id'),
            'creator' => $sender->getPerson()->getId(),
            'tasktypeid' => $request->getParameter('tasktypeid'),
            'taskstatusid' => $request->getParameter('taskstatusid'),
            'tasklocalid' => $request->getParameter('tasklocalid'),
            'percentage' => $request->getParameter('percentage'),
            'relateds' => $request->getParameter('relateds'),
            'isprincipal' => $request->getParameter('isprincipal') && $request->getParameter('isprincipal') == 'on',
            'activityorigin' => $request->getParameter('activityorigin'),
            'activitytype' => $request->getParameter('activitytype'),
            'reminderid' => $request->getParameter('reminderid'),
            'manuallyprogrammed' => $request->getParameter('manuallyprogrammed') && $request->getParameter('manuallyprogrammed') == 'on',
            'parentid' => $request->getParameter('subtask_id'),
            'entityid' => $request->getParameter('entityid'),
            // only for me (parent)
            'plan' => $request->getParameter('institutional') && $request->getParameter('institutional') != '' && $request->getParameter('plan') && $request->getParameter('plan') != '' ? $request->getParameter('plan') : '',
            'participants' => $request->getParameter('participants'),
            'frequencytype' => $request->getParameter('frequencytype'),
            'dailyRepetition' => $request->getParameter('dailyRepetition') && $request->getParameter('dailyRepetition') != '' ? $request->getParameter('dailyRepetition') : null,
            'weeklyRepetition' => $request->getParameter('weeklyRepetition') && $request->getParameter('weeklyRepetition') != '' ? $request->getParameter('weeklyRepetition') : null,
            'monthlyRepetition' => $request->getParameter('monthlyRepetition') && $request->getParameter('monthlyRepetition') != '' ? $request->getParameter('monthlyRepetition') : null,
            'yearlyRepetition' => $request->getParameter('yearlyRepetition') && $request->getParameter('yearlyRepetition') != '' ? $request->getParameter('yearlyRepetition') : null,
            'breakingRepetition' => $request->getParameter('breakingRepetition') && $request->getParameter('breakingRepetition') != '' ? $request->getParameter('breakingRepetition') : null,
        );
        
        $tasks[] = $template;

        foreach ($tasks as $key => $task) {
            // setting up duration -------------------------------------------------
            $start = date('d/m/Y H:i:s');

            $durationtype = $request->getParameter('task_period') && $request->getParameter('task_period') == 'true';

            $duration = 0;
            if ($request->getParameter('duration') && $request->getParameter('duration') != '')
                $duration = $request->getParameter('duration');

            $analizedduration = self::getDuration($task['manuallyprogrammed'], $request->getParameter('startdate'), $request->getParameter('enddate'), $durationtype, $duration, $start);
            //Util::printArrayInErrorBox($analizedduration);
            $start = $analizedduration['start'];
            $tasks[$key]['start'] = $analizedduration['start'];
            $tasks[$key]['end'] = $analizedduration['end'];
            $tasks[$key]['durationvalue'] = $analizedduration['duration'];
            $tasks[$key]['durationtype'] = $analizedduration['durationtype'];

            // checking if local is available---------------------------------------
            if ($request->getParameter('tasklocalid') && $request->getParameter('tasklocalid') != '') {
                $local = Doctrine::getTable('Local')->find($request->getParameter('tasklocalid'));
                if ($local->getIsExcluding()) {
                    $reserved = true;

                    $sd = date_create_from_format('d/m/Y H:i:s', $tasks[$key]['start'])->format('Y-m-d H:i:s');
                    $ed = date_create_from_format('d/m/Y H:i:s', $tasks[$key]['end'])->format('Y-m-d H:i:s');

                    if ($request->getParameter('id') && $request->getParameter('id') != '')
                        $reserved = $local->isReservedAtDate($sd, $ed, $request->getParameter('id'));
                    else
                        $reserved = $local->isReservedAtDate($sd, $ed);

                    if ($reserved)
                        throw new Exception('task.action.saveorupdate.localocupied');
                }
            }

            // setting up periodically dates if exists------------------------------
            $isperiodical = $request->getParameter('periodictask') && $request->getParameter('periodictask') == 'on';
            $frequencytype = $request->getParameter('frequencyType');

            $repetition = '';
            switch ($frequencytype) {
                case 1: //daily
                    $tasks[$key]['dailyRepetition'] = $request->getParameter('dailyRepetition');
                    $repetition = json_decode($request->getParameter('dailyRepetition')); //{"dailyRepetitionDaysAmount":"1","dailyRepetitionDaysType":"0","breakingRepetitionDate":"30/05/2013"}
                    break;
                case 2: //weekly
                    $tasks[$key]['weeklyRepetition'] = $request->getParameter('weeklyRepetition');
                    $repetition = json_decode($request->getParameter('weeklyRepetition')); //weeklyRepetition	{"weeklyRepetitionWeeksAmount":"1","weeklyRepetitionDays":["0","1","2","3","4","5","6"]}
                    break;
                case 3: //monthly
                    $tasks[$key]['monthlyRepetition'] = $request->getParameter('monthlyRepetition');
                    $repetition = json_decode($request->getParameter('monthlyRepetition')); //monthlyRepetition	{"monthlyRepetitionVariant":"0","monthlyRepetitionDayNumber":"1","monthlyRepetitionVariantNonOrdMonthJump":"1"}    {"monthlyRepetitionVariant":"1","monthlyRepetitionOrdinalDay":"Segundo","monthlyRepetitionDay":"Domingo","monthlyRepetitionVariantOrdMonthJump":"3"}
                    break;
                case 4: //yearly
                    $tasks[$key]['yearlyRepetition'] = $request->getParameter('yearlyRepetition');
                    $repetition = json_decode($request->getParameter('yearlyRepetition')); //yearlyRepetition	{"yearlyRepetitionVariant":"0","yearlyRepetitionDayNumber":"1","yearlyRepetitionVariantNonOrdyearJump":"1"}    {"yearlyRepetitionVariant":"1","yearlyRepetitionOrdinalDay":"Segundo","yearlyRepetitionDay":"Domingo","yearlyRepetitionVariantOrdyearJump":"3"}  //yearlyRepetition	{"yearlyRepetitionVariant":"0","yearlyRepetitionVariantNonOrdMonth":"Septiembre","yearlyRepetitionVariantNonOrdDayNumber":"3"}
                    break;
                default:
                    break;
            }

            $schedule = false;
            $person = Doctrine::getTable('Person')->find($tasks[$key]['responsibleid']);
            if ($person)
                $schedule = $person->getProfileSchedule($tasks[$key]['entityid']);
            
            
            $breaking = json_decode($request->getParameter('breakingRepetition')); //breakingRepetition	{"breakingRepetitionVariant":"0","breakingRepetitionNumberAmount":"2"}

            $periodicallydates = self::getPeriodicallyDates($start, $breaking, $repetition, $isperiodical, $frequencytype, $schedule);
            //Util::printArrayInErrorBox($periodicallydates);

            if (count($periodicallydates) > 0) {
                //Util::printArrayInErrorBox($analizedduration);
                $fromdate = date_create_from_format('d/m/Y H:i:s', $analizedduration['start'])->format('Y-m-d H:i:s');
                $todate = date_create_from_format('d/m/Y H:i:s', $analizedduration['end'])->format('Y-m-d H:i:s');

                $secduration = Util::dateDifference($fromdate, $todate);

                //creating task copy to replace serial
                $subtasks[] = $tasks[$key];
                $subtasks[count($subtasks) - 1]['serialid'] = 1; //$key + 1;
                $subtasks[count($subtasks) - 1] = $this->copyTask($subtasks[count($subtasks) - 1], array('id', 'participants', 'frequencytype', 'dailyRepetition', 'weeklyRepetition', 'monthlyRepetition', 'yearlyRepetition', 'breakingRepetition'));
                

                // creating subtasks
                for ($i = 0; $i < count($periodicallydates); $i++) {
                    $dt = date_create_from_format('d/m/Y H:i:s', $periodicallydates[$i]);

                    $validdate = true;
                    if ($schedule && $repetition->dailyRepetitionDaysType == 1)
                        $validdate = $schedule->isValidDate($dt);

                    if ($validdate) {
                        $enddate = date_create_from_format('d/m/Y H:i:s', $periodicallydates[$i]);

                        $enddate->add(new DateInterval('PT' . $secduration . 'S'));

                        $subtasks[] = $tasks[$key];
                        $subtasks[count($subtasks) - 1]['start'] = $dt->format('d/m/Y H:i:s');
                        $subtasks[count($subtasks) - 1]['end'] = $enddate->format('d/m/Y H:i:s');
                        $subtasks[count($subtasks) - 1]['serialid'] = 1; //$key + 1;
                        $subtasks[count($subtasks) - 1] = $this->copyTask($subtasks[count($subtasks) - 1], array('id', 'participants', 'frequencytype', 'dailyRepetition', 'weeklyRepetition', 'monthlyRepetition', 'yearlyRepetition', 'breakingRepetition'));
                       
                    }
                }
            }
        }

        $participants = json_decode($request->getParameter('participants'));
        
        //creating primary task copy foreach participants
        for ($i = 0; $i < count($participants); $i++) {
            $tasks[] = $tasks[0];
            $tasks[count($tasks) - 1]['responsibleid'] = $participants[$i]->id;
            $tasks[count($tasks) - 1]['multipartid'] = 1;
            $tasks[count($tasks) - 1] = $this->copyTask($tasks[count($tasks) - 1], array('id', 'plan', 'participants', 'frequencytype', 'dailyRepetition', 'weeklyRepetition', 'monthlyRepetition', 'yearlyRepetition', 'breakingRepetition'));
        }
                
        foreach ($subtasks as $task){
            $tasks[] = $task;
            
            //creating derivated tasks copy foreach participants
            for ($i = 0; $i < count($participants); $i++) {
                //creating derivated task copy
                $tasks[] = $task;
                $tasks[count($tasks) - 1]['responsibleid'] = $participants[$i]->id;
                $tasks[count($tasks) - 1]['serialid'] = null;
                $tasks[count($tasks) - 1]['multipartid'] = 1;
                $tasks[count($tasks) - 1] = $this->copyTask($tasks[count($tasks) - 1], array('id', 'plan', 'participants', 'frequencytype', 'dailyRepetition', 'weeklyRepetition', 'monthlyRepetition', 'yearlyRepetition', 'breakingRepetition'));
            }
        }

        return $tasks;
    }

    public function save(sfWebRequest $request) {
        $element = json_decode($request->getParameter('element'), true);

        $task = array();
        $isnew = false;

        $taskstatus = Doctrine::getTable('Taskstatus')->find($element['taskstatusid']);

        if ($element['id'] && $element['id'] != '')
            $task = Doctrine::getTable('Task')->find($element['id']);

        if ($task == array()) {
            $task = new Task();
            $task->setEvent(new Event());
            $task->setCreatedBy($element['creator']);
            $isnew = true;
        }

        $task->getEvent()->setName($element['name']);

        $task->setResponsibleid($element['responsibleid']);
        $task->setEntityid($element['entityid']);
        $task->setRelateds($element['relateds']);

        $task->setActivityorigin($element['activityorigin']);
        $task->setActivitytype($element['activitytype']);
        $task->setIsprincipal($element['isprincipal']);

        if ($element['percentage'] && $element['percentage'] != '')
            $task->setPercentage($element['percentage']);
        else {
            if ($taskstatus)
                $task->setPercentage($taskstatus->getPercent());
            else
                $task->setPercentage(0);
        }

        if ($element['parentid'] && $element['parentid'] != '')
            $task->setParentid($element['parentid']);
        else
            $task->setParentid(null);

        if ($taskstatus) {
            $task->setTaskstatusid($taskstatus->getId());
            $task->getEvent()->setCalendarid($taskstatus->getCalendar()->getId());
        }

        if ($element['reminderid'] && $element['reminderid'] != '')
            $task->getEvent()->setReminderid($element['reminderid']);
        else
            $task->getEvent()->setReminderid(null);

        if ($element['tasktypeid'] && $element['tasktypeid'] != '')
            $task->setTasktypeid($element['tasktypeid']);

        if ($element['plan'] && $element['plan'] != '') {
            $plan = Doctrine::getTable('Plan')->find($element['plan']);
            $task->Plans[] = $plan;
        }

        $task->setManuallyprogrammed($element['manuallyprogrammed']);

        $task->getEvent()->setStart(Util::convertToDate($element['start'], 'd/m/Y H:i:s', 'Y-m-d H:i:s'));
        $task->getEvent()->setEnd(Util::convertToDate($element['end'], 'd/m/Y H:i:s', 'Y-m-d H:i:s'));
        $task->setDurationvalue($element['durationvalue']);
        $task->setDurationtype($element['durationtype']);

        // setting up local ----------------------------------------------------
        if ($element['tasklocalid'] && $element['tasklocalid'] != '') {
            $local = Doctrine::getTable('Local')->find($element['tasklocalid']);
            if ($local && $local->getId() > 0) {
                $task->setLocalid($local->getId());
                $task->getEvent()->setLocation($local->getName());
            }
        }

        if ($element['participants'] && $element['participants'] != '') {
            $task->setParticipants($element['participants']);

            $multiparts = $task->getTasksInMultipart();
            foreach ($multiparts as $multipart)
                $multipart->getEvent()->delete();
        }

        if ($element['multipartid'] && $element['multipartid'] != '') {
            $task->setMultipartid($element['multipartid']);

            $parent = Doctrine::getTable('Task')->find($element['multipartid']);
            if($parent){
                do {
                    if (count(explode(Task::PREFIX_MULTIPARTICIPANT_TASK, $parent->getEvent()->getCode())) < 2)
                        $parent->getEvent()->setCode(Task::PREFIX_MULTIPARTICIPANT_TASK . $parent->getEvent()->getCode());
                    $parent->getEvent()->save();

                    $parent = $parent->getMultipart();
                } while ($parent && $parent->getId() > 0);
            }
        }


        $serials = $task->getTasksInSerial();
        foreach ($serials as $serial)
            $serial->getEvent()->delete();

        if ($element['serialid'] && $element['serialid'] != '') {
            $task->setSerialid($element['serialid']);

            $parent = Doctrine::getTable('Task')->find($element['serialid']);
            do {
                if (count(explode(Task::PREFIX_PERIODICALLY_TASK, $parent->getEvent()->getCode())) < 2)
                    $parent->getEvent()->setCode(Task::PREFIX_PERIODICALLY_TASK . $parent->getEvent()->getCode());
                $parent->getEvent()->save();

                $parent = $parent->getSerial();
            } while ($parent && $parent->getId() > 0);
        }

        $task->setDailyrepetition($element['dailyRepetition']);
        $task->setWeeklyrepetition($element['weeklyRepetition']);
        $task->setMonthlyrepetition($element['monthlyRepetition']);
        $task->setYearlyrepetition($element['yearlyRepetition']);

        $task->setBreakingrepetition($element['breakingRepetition']);
        $task->setFrequencytype($element['frequencytype']);

        $task->getEvent()->setCode($task->generateCode());

        $task->save();

        sfContext::getInstance()->getLogger()->alert('Salvada tarea ' . $task->exportTo('json') . ' por el usuario "' . $this->getUser()->getUsername() . '".');


        $emailalloewd = Util::getMetadataValue('app_sendsystememails');
        $emailstrategy = Util::getMetadataValue('app_mailstrategy');
        $mailline = array();

        if ($emailalloewd && $isnew) {
            $filter = array();
            $obj = new stdClass();
            $obj->type = "int";
            $obj->field = "id";
            $obj->comparison = "eq";
            $obj->value = $task->getId();
            $filter[] = $obj;
            $rows = TaskTable::getInstance()->getAllPaged(0, 1, $filter);

            $taskbehavior = Util::getBundle('task.field.label');
            if ($rows['data'] && $rows['data'][0] && $rows['data'][0]['isinvitation'])
                $taskbehavior = Util::getBundle('task.field.type');

            $start = date_create_from_format('Y-m-d H:i:s', $task->getEvent()->getStart());
            $end = date_create_from_format('Y-m-d H:i:s', $task->getEvent()->getEnd());

            $mailtouser = array(
                'sendto' => $task->getPerson()->getSfGuardUser()->getEmailAddress(),
                'subject' => array(
                    'msg' => 'task.action.creationnotify.mailsubject',
                    'params' => array($taskbehavior)
                ),
                'partial' => 'mail/NewTaskSuccess',
                'params' => array(
                    'fullname' => $task->getPerson()->getFullName(),
                    'taskbehavior' => $taskbehavior,
                    'name' => $task->getEvent()->getName(),
                    'type' => $task->getTasktype()->getName(),
                    'status' => $task->getTaskstatus()->getCalendar()->getName(),
                    'local' => $task->getLocal()->getName(),
                    'begindate' => $start->format('d/m/Y g:i A'),
                    'enddate' => $end->format('d/m/Y g:i A'),
                    'serndername' => $task->getCreator() && $task->getCreator()->getId() > 0 ? $task->getCreator()->getFullName() : $task->getPerson()->getFullName(),
                )
            );
            switch (strtolower($emailstrategy)) {
                case 'queue':
                    $mail = new Mailqueue();
                    $mail->setValue(json_encode($mailtouser));
                    $mail->setName(Util::generateCode($mail->getValue() . rand(1, PHP_INT_MAX) . rand(1, PHP_INT_MAX) . rand(1, PHP_INT_MAX)));
                    $mail->save();
                    break;
                default:
                    $mailline = array($mailtouser);
                    break;
            }
        }

        $task = $task->toArray();
        if ($mailline && count($mailline) > 0)
            $task['mailline'] = json_encode($mailline);


        return $task;
    }

    public function delete(sfWebRequest $request) {
        $pks = json_decode(stripslashes($request->getParameter('ids')));
        return Doctrine::getTable('Task')->deleteByPK($request->getParameter('plan'), $pks);
    }

    private static function exploreAvailability($task) {
        try {
            $start = date_create_from_format('Y-m-d H:i:s', $task->getEvent()->getStart());
            $start = $start->format('Y-m-d H:i:s');

            $enddate = date_create_from_format('Y-m-d H:i:s', $task->getEvent()->getEnd());
            $enddate = $enddate->format('Y-m-d H:i:s');

            return TaskTable::getInstance()->exploreAvailability($start, $enddate, $task->getPerson()->getId(), $task->getId());
        } catch (Exception $exc) {
            
        }
        return false;
    }

    private static function getOrdinalName($value) {
        $result = false;
        switch (strtolower($value)) {
            case strtolower(Util::getOrdinalName(1)):
            case strtolower(Util::getOrdinalName(1, 'es', 2)):
                $result = strtolower(Util::getOrdinalName(1, 'en'));
                break;
            case strtolower(Util::getOrdinalName(2)):
                $result = strtolower(Util::getOrdinalName(2, 'en'));
                break;
            case strtolower(Util::getOrdinalName(3)):
            case strtolower(Util::getOrdinalName(3, 'es', 2)):
                $result = strtolower(Util::getOrdinalName(3, 'en'));
                break;
            case strtolower(Util::getOrdinalName(4)):
                $result = strtolower(Util::getOrdinalName(4, 'en'));
                break;
            case strtolower(Util::getOrdinalName('l')):
                $result = strtolower(Util::getOrdinalName('l', 'en'));
                break;
            default:
                break;
        }
        return $result;
    }

    private static function getDayName($value) {
        $result = false;
        switch (strtolower($value)) {
            case strtolower(Util::getDayName(1)):
                $result = strtolower(Util::getDayName(1, 'en'));
                break;
            case strtolower(Util::getDayName(2)):
                $result = strtolower(Util::getDayName(2, 'en'));
                break;
            case strtolower(Util::getDayName(3)):
            case strtolower(Util::getDayName(3, 'es', 2)):
                $result = strtolower(Util::getDayName(3, 'en'));
                break;
            case strtolower(Util::getDayName(4)):
                $result = strtolower(Util::getDayName(4, 'en'));
                break;
            case strtolower(Util::getDayName(5)):
                $result = strtolower(Util::getDayName(5, 'en'));
                break;
            case strtolower(Util::getDayName(6)):
            case strtolower(Util::getDayName(6, 'es', 2)):
                $result = strtolower(Util::getDayName(6, 'en'));
                break;
            case strtolower(Util::getDayName(7)):
                $result = strtolower(Util::getDayName(7, 'en'));
                break;
            default:
                break;
        }
        return $result;
    }

    private static function getMonthName($value) {
        $result = false;
        switch (strtolower($value)) {
            case strtolower(Util::getMonthName(1)):
                $result = 1;
                break;
            case strtolower(Util::getMonthName(2)):
                $result = 2;
                break;
            case strtolower(Util::getMonthName(3)):
                $result = 3;
                break;
            case strtolower(Util::getMonthName(4)):
                $result = 4;
                break;
            case strtolower(Util::getMonthName(5)):
                $result = 5;
                break;
            case strtolower(Util::getMonthName(6)):
                $result = 6;
                break;
            case strtolower(Util::getMonthName(7)):
                $result = 7;
                break;
            case strtolower(Util::getMonthName(8)):
                $result = 8;
                break;
            case strtolower(Util::getMonthName(9)):
                $result = 9;
                break;
            case strtolower(Util::getMonthName(10)):
                $result = 10;
                break;
            case strtolower(Util::getMonthName(11)):
                $result = 11;
                break;
            case strtolower(Util::getMonthName(12)):
                $result = 12;
                break;
            default:
                break;
        }
        return $result;
    }

    private static function getPeriodicallyDates($start, $breaking, $repetition, $isperiodical = false, $frequencytype = false, $schedule = false) {
        // array for dates according periodically programming
        $periodicallydates = array();

        if ($isperiodical && $frequencytype) {

            $breakingdate = date_create_from_format('d/m/Y', $breaking->breakingRepetitionDate);

            $startasarray = date_parse_from_format('d/m/Y H:i:s', $start);
            // se adicionaron estas lineas pues en un duplicar plan de Reynerio daba error al date_create_from_format('d-m-Y H:i', $weekstart . ' ' . $startasarray['hour'] . ':' . $startasarray['minute']);
            // el error era por la hora y los minutos le faltaba un cero delante para cumplir con el formato H:i
            $startasarray['hour'] = str_pad($startasarray['hour'], 2, "0", STR_PAD_LEFT);
            $startasarray['minute'] = str_pad($startasarray['minute'], 2, "0", STR_PAD_LEFT);
            //Util::printArrayInErrorBox($startasarray);

            switch ($frequencytype) {
                case 1: //daily
                    $currentdate = date_create_from_format('d/m/Y H:i:s', $start);

                    if ($breaking->breakingRepetitionVariant == 0) {
                        do {
                            $currentdate->add(new DateInterval('P' . $repetition->dailyRepetitionDaysAmount . 'D'));
                            if ($repetition->dailyRepetitionDaysType == 0 || ($schedule && $schedule->isValidDate($currentdate)))
                                array_push($periodicallydates, $currentdate->format('d/m/Y H:i:s'));
                        } while ($schedule && count($periodicallydates) < $breaking->breakingRepetitionNumberAmount - 1);
                    } else {
                        $currentdate->add(new DateInterval('P' . $repetition->dailyRepetitionDaysAmount . 'D'));
                        while ($currentdate <= $breakingdate) {
                            array_push($periodicallydates, $currentdate->format('d/m/Y H:i:s'));
                            $currentdate->add(new DateInterval('P' . $repetition->dailyRepetitionDaysAmount . 'D'));
                        }
                    }
                    break;
                case 2: //weekly
                    $startrenew = strtotime(date('d-m-Y', strtotime($startasarray['day'] . '-' . $startasarray['month'] . '-' . $startasarray['year'])));

                    for ($index = 0; $index < count($repetition->weeklyRepetitionDays); $index++) {
                        $weekstart = date('d-m-Y', strtotime('this week last monday', $startrenew));
                        $currentdate = date_create_from_format('d-m-Y H:i', $weekstart . ' ' . $startasarray['hour'] . ':' . $startasarray['minute']);
                        $days = $repetition->weeklyRepetitionDays[$index] - 1;
                        if ($days == -1)
                            $currentdate->sub(new DateInterval('P1D'));
                        else{
                            if($days>0)
                                $currentdate->add(new DateInterval('P' . $days . 'D'));
                        }
                        

                        $currentdate->add(new DateInterval('P' . $repetition->weeklyRepetitionWeeksAmount . 'W'));
                        if ($breaking->breakingRepetitionVariant == 0) {
                            for ($j = 0; $j < $breaking->breakingRepetitionNumberAmount - 1; $j++) {
                                $currentdate->add(new DateInterval('P' . $repetition->weeklyRepetitionWeeksAmount . 'W'));
                                array_push($periodicallydates, $currentdate->format('d/m/Y H:i:s'));
                            }
                        } else {
                            $currentdate->add(new DateInterval('P' . $repetition->weeklyRepetitionWeeksAmount . 'W'));
                            while ($currentdate <= $breakingdate) {
                                array_push($periodicallydates, $currentdate->format('d/m/Y H:i:s'));
                                $currentdate->add(new DateInterval('P' . $repetition->weeklyRepetitionWeeksAmount . 'W'));
                            }
                        }
                    }
                    break;
                case 3: //monthly
                    $repetition->monthlyRepetitionOrdinalDay = self::getOrdinalName($repetition->monthlyRepetitionOrdinalDay);
                    $repetition->monthlyRepetitionDay = self::getDayName($repetition->monthlyRepetitionDay);
                    if ($breaking->breakingRepetitionVariant == 0) {
                        if ($repetition->monthlyRepetitionVariant == 0) {
                            $thismonthfirstday = mktime(0, 0, 0, $startasarray['month'], $repetition->monthlyRepetitionDayNumber, $startasarray['year']);
                            $thismonthfirstday = date("d/m/Y", $thismonthfirstday);

                            $currentdate = date_create_from_format('d/m/Y H:i', $thismonthfirstday . ' ' . $startasarray['hour'] . ':' . $startasarray['minute']);
                            for ($index = 0; $index < $breaking->breakingRepetitionNumberAmount - 1; $index++) {
                                $currentdate->add(new DateInterval('P' . $repetition->monthlyRepetitionVariantNonOrdMonthJump . 'M'));
                                array_push($periodicallydates, $currentdate->format('d/m/Y H:i:s'));
                            }
                        } else {
                            for ($index = 1; $index <= $breaking->breakingRepetitionNumberAmount - 1; $index++) {
                                $currentdate = mktime(0, 0, 0, $startasarray['month'] + $repetition->monthlyRepetitionVariantOrdMonthJump * $index, $startasarray['day'], $startasarray['year']);
                                $month = date("M", $currentdate);
                                $year = date("Y", $currentdate);
                                $currentdate = date('Y-m-d', strtotime($repetition->monthlyRepetitionOrdinalDay . ' ' . $repetition->monthlyRepetitionDay . ' of ' . $month . ' ' . $year));
                                $currentdate = date_create_from_format('Y-m-d H:i', $currentdate . ' ' . $startasarray['hour'] . ':' . $startasarray['minute']);
                                array_push($periodicallydates, $currentdate->format('d/m/Y H:i:s'));
                            }
                        }
                    } else {
                        if ($repetition->monthlyRepetitionVariant == 0) {
                            $thismonthfirstday = mktime(0, 0, 0, $startasarray['month'], $repetition->monthlyRepetitionDayNumber, $startasarray['year']);
                            $thismonthfirstday = date("d/m/Y", $thismonthfirstday);

                            $currentdate = date_create_from_format('d/m/Y H:i', $thismonthfirstday . ' ' . $startasarray['hour'] . ':' . $startasarray['minute']);
                            $currentdate->add(new DateInterval('P' . $repetition->monthlyRepetitionVariantNonOrdMonthJump . 'M'));
                            while ($currentdate <= $breakingdate) {
                                array_push($periodicallydates, $currentdate->format('d/m/Y H:i:s'));
                                $currentdate->add(new DateInterval('P' . $repetition->monthlyRepetitionVariantNonOrdMonthJump . 'M'));
                            }
                        } else {
                            $currentdate = mktime(0, 0, 0, $startasarray['month'] + $repetition->monthlyRepetitionVariantOrdMonthJump, $startasarray['day'], $startasarray['year']);
                            $month = date("M", $currentdate);
                            $year = date("Y", $currentdate);
                            $date = date('Y-m-d', strtotime($repetition->monthlyRepetitionOrdinalDay . ' ' . $repetition->monthlyRepetitionDay . ' of ' . $month . ' ' . $year));
                            $index = 2;
                            $currentdate = date_create_from_format('Y-m-d H:i', $date . ' ' . $startasarray['hour'] . ':' . $startasarray['minute']);
                            while ($currentdate <= $breakingdate) {
                                array_push($periodicallydates, $currentdate->format('d/m/Y H:i:s'));
                                $date = mktime(0, 0, 0, $startasarray['month'] + $repetition->monthlyRepetitionVariantOrdMonthJump * $index, $startasarray['day'], $startasarray['year']);
                                $month = date("M", $date);
                                $year = date("Y", $date);
                                $date = date('Y-m-d', strtotime($repetition->monthlyRepetitionOrdinalDay . ' ' . $repetition->monthlyRepetitionDay . ' of ' . $month . ' ' . $year));
                                $index++;
                                $currentdate = date_create_from_format('Y-m-d H:i', $date . ' ' . $startasarray['hour'] . ':' . $startasarray['minute']);
                            }
                        }
                    }
                    break;
                case 4: //yearly
                    $repetition->yearlyRepetitionVariantOrd = self::getOrdinalName($repetition->yearlyRepetitionVariantOrd);
                    $repetition->yearlyRepetitionVariantOrdDay = self::getDayName($repetition->yearlyRepetitionVariantOrdDay);
                    $repetition->yearlyRepetitionVariantNonOrdMonth = self::getMonthName($repetition->yearlyRepetitionVariantNonOrdMonth);
                    $repetition->yearlyRepetitionVariantOrdMonth = self::getMonthName($repetition->yearlyRepetitionVariantOrdMonth);

                    if ($breaking->breakingRepetitionVariant == 0) {
                        if ($repetition->yearlyRepetitionVariant == 0) {
                            $thisyearfirstday = mktime(0, 0, 0, $repetition->yearlyRepetitionVariantNonOrdMonth, $repetition->yearlyRepetitionVariantNonOrdDayNumber, $startasarray['year']);
                            $thisyearfirstday = date("d/m/Y", $thisyearfirstday);

                            $currentdate = date_create_from_format('d/m/Y H:i', $thisyearfirstday . ' ' . $startasarray['hour'] . ':' . $startasarray['minute']);
                            for ($index = 0; $index < $breaking->breakingRepetitionNumberAmount - 1; $index++) {
                                $currentdate->add(new DateInterval('P1Y'));
                                array_push($periodicallydates, $currentdate->format('d/m/Y H:i:s'));
                            }
                        } else {
                            for ($index = 1; $index <= $breaking->breakingRepetitionNumberAmount - 1; $index++) {
                                $currentdate = mktime(0, 0, 0, $repetition->yearlyRepetitionVariantOrdMonth, $startasarray['day'], $startasarray['year'] + $index);
                                $month = date("M", $currentdate);
                                $year = date("Y", $currentdate);
                                $currentdate = date('Y-m-d', strtotime($repetition->yearlyRepetitionVariantOrd . ' ' . $repetition->yearlyRepetitionVariantOrdDay . ' of ' . $month . ' ' . $year));
                                $currentdate = date_create_from_format('Y-m-d H:i', $currentdate . ' ' . $startasarray['hour'] . ':' . $startasarray['minute']);
                                array_push($periodicallydates, $currentdate->format('d/m/Y H:i:s'));
                            }
                        }
                    } else {
                        if ($repetition->yearlyRepetitionVariant == 0) {
                            $thisyearfirstday = mktime(0, 0, 0, $repetition->yearlyRepetitionVariantNonOrdMonth, $repetition->yearlyRepetitionVariantNonOrdDayNumber, $startasarray['year']);
                            $thisyearfirstday = date("d/m/Y", $thisyearfirstday);

                            $currentdate = date_create_from_format('d/m/Y H:i', $thisyearfirstday . ' ' . $startasarray['hour'] . ':' . $startasarray['minute']);
                            $currentdate->add(new DateInterval('P1Y'));
                            do {
                                array_push($periodicallydates, $currentdate->format('d/m/Y H:i:s'));
                                $currentdate->add(new DateInterval('P1Y'));
                            } while ($currentdate <= $breakingdate);
                        } else {
                            $index = 1;
                            do {
                                $currentdate = mktime(0, 0, 0, $repetition->yearlyRepetitionVariantOrdMonth, $startasarray['day'], $startasarray['year'] + $index);
                                $month = date("M", $currentdate);
                                $year = date("Y", $currentdate);
                                $currentdate = date('Y-m-d', strtotime($repetition->yearlyRepetitionVariantOrd . ' ' . $repetition->yearlyRepetitionVariantOrdDay . ' of ' . $month . ' ' . $year));
                                $currentdate = date_create_from_format('Y-m-d H:i', $currentdate . ' ' . $startasarray['hour'] . ':' . $startasarray['minute']);
                                array_push($periodicallydates, $currentdate->format('d/m/Y H:i:s'));
                                $index++;
                            } while ($currentdate <= $breakingdate);
                        }
                    }
                    break;
                default:
                    break;
            }
        }

        return $periodicallydates;
    }

    private static function getDuration($programedlocally, $start, $end, $type, $duration, $now) {
        $fixedduration = array();

        if ($programedlocally)
            $fixedduration = self::adjustDuration($start, $end, $duration, $type, $programedlocally);
        else
            $fixedduration = self::adjustDuration($now, $now, $duration, $type, $programedlocally);
        //Util::printArrayInErrorBox($fixedduration);

        $enddate = $fixedduration['enddate'];
        $type = $fixedduration['durationtype'];
        if ($fixedduration['duration'])
            $duration = $fixedduration['duration'];
        if ($fixedduration['start'])
            $now = $fixedduration['start'];

        return array(
            'start' => $now,
            'end' => $enddate,
            'duration' => $duration,
            'durationtype' => $type
        );
    }

    private static function adjustDuration($start, $enddate, $duration, $durationtype, $programedlocally = false) {
        $result = array();

        if ($programedlocally) {
            $start = date_create_from_format('d/m/Y H:i:s', $start);
            $enddate = date_create_from_format('d/m/Y H:i:s', $enddate);

            if (!$durationtype)
                $durationtype = 'H';

            $result['duration'] = Util::dateDifference($start->format('Y-m-d H:i:s'), $enddate->format('Y-m-d H:i:s'), $durationtype);
            $result['durationtype'] = $durationtype;

            $result['start'] = $start->format('d/m/Y H:i:s');
            $result['enddate'] = $enddate->format('d/m/Y H:i:s');
        } else {
            //estrategia de asignacion programada de fechas segun las relaciones  
            $result['start'] = false;
            $result['duration'] = false;
            $enddate = date_create_from_format('d/m/Y H:i:s', $start);
            if (!$durationtype) {
                $result['durationtype'] = 'H';
                $enddate->add(new DateInterval('PT' . $duration . 'H'));
            } else {
                $result['durationtype'] = 'D';
                $enddate->add(new DateInterval('P' . $duration . 'D'));
            }

            $result['enddate'] = $enddate->format('d/m/Y H:i:s');
        }
        return $result;
    }

    public function importtasks(sfWebRequest $request) {
        $plan = Doctrine::getTable('Plan')->find($request->getParameter('plan'));
        if ($plan) {
            $tasks = json_decode($request->getParameter('tasks'));
            foreach ($tasks as $task) {
                $taskchild = Doctrine::getTable('Task')->find($task->id);

                $plan->includeTask($taskchild->getId());
                sfContext::getInstance()->getLogger()->alert('Incluyendo en el plan ' . $plan->getName() . ' la tarea ' . $taskchild->exportTo('json') . ' por el usuario "' . $this->getUser()->getUsername() . '".');
            }
        }
    }

    public function presaveWithParams(sfWebRequest $request, $name, $responsibleid, $tasktypeid, $taskstatusid, $tasklocalid, $percentage, $relateds, $isprincipal, $activityorigin, $activitytype, $reminderid, $manuallyprogrammed, $subtaskid, $entityid, $institutional, $planid, $participants, $duration, $start, $end, $breakingrepetition, $dailyrepetition, $weeklyrepetition, $monthlyrepetition, $yearlyrepetition) {
        $request->setParameter('id', '');
        $request->setParameter('name', $name);
        $request->setParameter('responsible_id', $responsibleid);
        $request->setParameter('tasktypeid', $tasktypeid);
        $request->setParameter('taskstatusid', $taskstatusid);
        $request->setParameter('tasklocalid', $tasklocalid);
        $request->setParameter('percentage', $percentage);
        $request->setParameter('relateds', $relateds);
        $request->setParameter('isprincipal', $isprincipal);
        $request->setParameter('activityorigin', $activityorigin);
        $request->setParameter('activitytype', $activitytype);
        $request->setParameter('reminderid', $reminderid);
        $request->setParameter('manuallyprogrammed', $manuallyprogrammed);
        $request->setParameter('subtask_id', $subtaskid);
        $request->setParameter('entityid', $entityid);
        $request->setParameter('institutional', $institutional);
        $request->setParameter('plan', $planid);
        $request->setParameter('participants', $participants);
        $request->setParameter('duration', (int) $duration);

        if ($request->getParameter('year') && $request->getParameter('year') != '') {
            $array = explode('-', $start);
            $array[0] = $request->getParameter('year');
            $request->setParameter('startdate', Util::convertToDate(implode('-', $array), 'Y-m-d H:i:s', 'd/m/Y H:i:s'));

            $array = explode('-', $end);
            $array[0] = $request->getParameter('year');
            $request->setParameter('enddate', Util::convertToDate(implode('-', $array), 'Y-m-d H:i:s', 'd/m/Y H:i:s'));

            $breakingrepetition = json_decode($breakingrepetition);
            $array = explode('/', $breakingrepetition->breakingRepetitionDate);
            $array[2] = $request->getParameter('year');
            $breakingrepetition->breakingRepetitionDate = implode('/', $array);
            $breakingrepetition = json_encode($breakingrepetition);
        }

        if ($breakingrepetition && $breakingrepetition != '')
            $request->setParameter('periodictask', 'on');

        $request->setParameter('breakingRepetition', $breakingrepetition);

        if ($dailyrepetition && $dailyrepetition != '') {
            $request->setParameter('dailyRepetition', $dailyrepetition);
            $request->setParameter('frequencyType', 1);
        }

        if ($weeklyrepetition && $weeklyrepetition != '') {
            $request->setParameter('weeklyRepetition', $weeklyrepetition);
            $request->setParameter('frequencyType', 2);
        }

        if ($monthlyrepetition && $monthlyrepetition != '') {
            $request->setParameter('monthlyRepetition', $monthlyrepetition);
            $request->setParameter('frequencyType', 3);
        }

        if ($yearlyrepetition && $yearlyrepetition != '') {
            $request->setParameter('yearlyRepetition', $yearlyrepetition);
            $request->setParameter('frequencyType', 4);
        }

        return $this->presave($request);
    }

    public function gettaskelements(sfWebRequest $request) {
        $plan = Doctrine::getTable('Plan')->find($request->getParameter('planid'));
        $task = Doctrine::getTable('Task')->find($request->getParameter('id'));

        if ($task && $task->getId() > 0
                && !$task->getSerialid() && !$task->getMultipartid())  //ignore serial tasks sons
            return $this->presaveWithParams($request, $task->getEvent()->getName(), $task->getResponsibleid(), $task->getTasktypeid(), $task->getTaskstatusid(), $task->getLocalid(), $task->getPercentage(), $task->getRelateds(), $task->getIsprincipal(), $task->getActivityorigin(), $task->getActivitytype(), $task->getEvent()->getReminderid(), 'on', $task->getParentid(), $task->getEntityid(), 'true', $plan->getId(), $task->getParticipants(), $task->getDurationvalue(), $task->getEvent()->getStart(), $task->getEvent()->getEnd(), $task->getBreakingrepetition(), $task->getDailyrepetition(), $task->getWeeklyrepetition(), $task->getMonthlyrepetition(), $task->getYearlyrepetition());
    }

    public function getimportelements(sfWebRequest $request) {
        $elements = array();
        if ($request->getParameter('url') && $request->getParameter('url') != '') {
            $location = Util::getRootPath($request->getParameter('url'), true, true);

            $content = file_get_contents($location, true);

            $lines = explode(';', $content);

            $metadata = sfSecurity::decrypt($lines[0], sfSecurity::EXPORT_KEY);
            $metadata = json_decode($metadata, true);

            $metadata['amount'] = count($lines) - 1;

            $plan = false;
            if ($metadata['plan'])
                $plan = Doctrine::getTable('Plan')->getRebuilded($metadata['plan']);

            $task = sfSecurity::decrypt($lines[$request->getParameter('item') + 1], sfSecurity::EXPORT_KEY);
            $task = json_decode($task, true);

            if ($task) {
                try {
                    $responsible = Doctrine::getTable('Person')->getRebuilded($task['Person']);
                    $tasktype = Doctrine::getTable('Tasktype')->getRebuilded($task['Tasktype']);
                    $local = Doctrine::getTable('Local')->getRebuilded($task['Local']);
                    $taskstatus = Doctrine::getTable('Taskstatus')->getRebuilded($task['Taskstatus']);

                    $request->setParameter('startdate', Util::convertToDate($task['Event']['start'], 'Y-m-d H:i:s', 'd/m/Y H:i:s'));
                    $request->setParameter('enddate', Util::convertToDate($task['Event']['end'], 'Y-m-d H:i:s', 'd/m/Y H:i:s'));
                    $elements = $this->presaveWithParams($request, $task['Event']['name'], $responsible->getId(), $tasktype->getId(), $taskstatus->getId(), $local->getId(), $task['percentage'], $task['relateds'], $task['isprincipal'], $task['activityorigin'], $task['activitytype'], $task['Event']['Reminder']['id'], 'on', $task['parentid'], $task['entityid'], 'true', $plan->getId(), $task['participants'], $task['durationvalue'], $task['Event']['start'], $task['Event']['end'], $task['breakingrepetition'], $task['dailyrepetition'], $task['weeklyrepetition'], $task['monthlyrepetition'], $task['yearlyrepetition']);
                } catch (Exception $exc) {
                    sfContext::getInstance()->getLogger()->alert(
                                    $exc->getLine() . ' ' . $exc->getFile() . '\r\n' .
                                    $exc->getMessage() . '\r\n' .
                                    $exc->getTraceAsString()) . '\r\n-------------------------';
                }
            }

            if ($request->getParameter('item') && $request->getParameter('item') == $metadata['amount'] - 1)
                unlink($location);
        }

        return $elements;
    }

    public function validaterange(sfWebRequest $request) {
        $response = array('success' => true);

        $user = Doctrine::getTable('sfGuardUser')->find($request->getParameter('responsibleid'));
        if ($user && $user->getPerson() && $user->getPerson()->getId() > 0) {
            $entityid = false;
            if ($request->getParameter('entityid') && strtolower($request->getParameter('entityid')) != 'undefined')
                $entityid = $request->getParameter('entityid');
            $schedule = $user->getPerson()->getProfileSchedule($entityid);

            $start = date_create_from_format('d/m/Y H:i:s', $request->getParameter('startdate'));
            if ($schedule && !$schedule->isValidDate($start))
                return array('success' => false, 'message' => 'task.action.plantask.outofdate', 'data' => 's');

            $end = date_create_from_format('d/m/Y H:i:s', $request->getParameter('enddate'));
            if ($schedule && !$schedule->isValidDate($end))
                return array('success' => false, 'message' => 'task.action.plantask.outofdate', 'data' => 'e');
//
            $task = false;
            if ($request->getParameter('taskid') && is_numeric($request->getParameter('taskid')))
                $task = $request->getParameter('taskid');
            $concurrency = TaskTable::exploreAvailability($start->format('Y-m-d H:i:s'), $end->format('Y-m-d H:i:s'), $user->getPerson()->getId(), $task);
            if (count($concurrency) > 0)
                return array('success' => false, 'message' => 'task.action.plantask.coincident', 'data' => $concurrency);
        }

        return $response;
    }

    public function executeReportbaselinetasks(sfWebRequest $request) {
        $this->appname = Util::getMetadataValue('app_name');

        $params = json_decode($request->getParameter('params'), true);

        $this->params = $params["elements"];
        $this->title = $params["title"];
    }

    public function executeReport1(sfWebRequest $request) {
        $this->appname = Util::getMetadataValue('app_name');
        $this->headershadow = Util::getMetadataValue('app_headershadow');

        $this->user = Doctrine::getTable('sfGuardUser')->retrieveByUsername($this->getUser()->getUsername());
        $boos = $this->user->getPerson()->getBoss();


        $this->userrange = ' ';
        if ($this->user->getPerson()->getPositionid() && $this->user->getPerson()->getPositionid() > 0)
            $this->userrange = $this->user->getPerson()->getPosition()->getName();
        $this->user = $this->user->getFirstName() . ' ' . $this->user->getLastName();

        $this->approvalrange = ' ';
        if ($boos->getPositionid() && $boos->getPositionid() > 0)
            $this->approvalrange = $boos->getPosition()->getName();
        $this->approvalperson = $boos->getsfGuardUser()->getFirstName() . ' ' . $boos->getsfGuardUser()->getLastName();

        $plantasks = array();
        $planstart = date_create_from_format('Y-m-d', $request->getParameter('year') . '-01-01');

        if ($request->getParameter('person') && $request->getParameter('person') != '') {
            $person = Doctrine::getTable('Person')->find($request->getParameter('person'));

            $this->entity = $person->getSfGuardUser()->getFirstName() . ' ' . $person->getSfGuardUser()->getLastName();
            $plantasks = Doctrine::getTable('Task')->getArrayForReport(false, $person->getId(), $planstart->format('Y'), false, false, true);
        } else {

            $plan = Doctrine::getTable('Plan')->find($request->getParameter('plan'));
            $this->objetives = $plan->getGoals();

            if ($request->getParameter('entity') && strtolower($request->getParameter('entity')) != 'undefined')
                $this->entity = strtoupper($request->getParameter('entity'));
            else {
                $m = ModuleTable::getInstance()->getMultientityManager();
                if ($m) {
                    $rows = EntityTable::getInstance()->getAllPaged(0, 1);
                    $this->entity = strtoupper($rows['data'][0]['name']);
                } else {
                    $this->entity = $days = Util::getMetadataValue('app_entityname');
                }
            }

            $plantasks = Doctrine::getTable('Task')->getArrayForReport($plan->getId(), false, $planstart->format('Y'), false, false, true);
        }

        $tasks = array();
        foreach ($plantasks as $task) {
            $start = date_create_from_format('Y-m-d H:i:s', $task->getEvent()->getStart());
            /*
            // esta es la variante correcta pero como se cambio q las tareas padres -> ya salen en el plan puesto q son las principales del responsable hay q quitar la restriccion de ->
            // to hide serial base tasks
            if (!(stripos($task->getEvent()->getCode(), '->') > -1) && $planstart->format('y') == $start->format('y')) {
                if (!$tasks[$task->getEvent()->getName() . $task->getPerson()->getId() . $start->format('y')])
                    $tasks[$task->getEvent()->getName() . $task->getPerson()->getId() . $start->format('y')] = array();
                $tasks[$task->getEvent()->getName() . $task->getPerson()->getId() . $start->format('y')][] = $task;
            }
            */
            if ($planstart->format('y') == $start->format('y')) {
                if (!$tasks[$task->getEvent()->getName() . $task->getPerson()->getId() . $start->format('y')])
                    $tasks[$task->getEvent()->getName() . $task->getPerson()->getId() . $start->format('y')] = array();
                $tasks[$task->getEvent()->getName() . $task->getPerson()->getId() . $start->format('y')][] = $task;
            }
        }

        $this->tasks = array();
        $count = 0;
        $tasksids = array();
        foreach ($tasks as $grupedtasks) {
            $start = date_create_from_format('Y-m-d H:i:s', $grupedtasks[0]->getEvent()->getStart());
            $enddate = date_create_from_format('Y-m-d H:i:s', $grupedtasks[0]->getEvent()->getEnd());

            $task = $grupedtasks[0]->toArray();

            if ($task['parentid'] > 0) {
                $array = array_reverse(TaskTable::getInstance()->getTaskIDBySiblings($task['id']));
                $tasksids[$task['id']] = implode('.', $array);
            } else {
                $count++;
                $tasksids[$task['id']] = $count;
            }

            $task['initialdates'] = array();
            $task['participants'] = json_decode($grupedtasks[0]->getInheritParticipants());
            if (count($task['participants']) < 1)
                $task['participants'] = json_decode($grupedtasks[0]->getMultipart()->getParticipants());

            if ($start->format('n') == $enddate->format('n')) {
                if ($start->format('j') == $enddate->format('j'))
                    $task['initialdates'][$start->format('n')] = $start->format('j');
                else
                    $task['initialdates'][$start->format('n')] = $start->format('j') . '-' . $enddate->format('j');
            } else {
                $task['initialdates'][$start->format('n')] = $start->format('j') . '-';
                $task['initialdates'][$enddate->format('n')] = '-' . $enddate->format('j');
            }
            $task['responsible'] = $grupedtasks[0]->getPerson()->getSfGuardUser()->getFirstName() . ' ' . $grupedtasks[0]->getPerson()->getSfGuardUser()->getLastName();

            $task['type'] = $grupedtasks[0]->getTasktype()->getName();
            $ttt = $grupedtasks[0]->getTasktype();
            while ($ttt->getParentid() > 0) {
                $ttt = $ttt->getTasktype();
                $task['type'] = $ttt->getName() . '|stringsplitter|' . $task['type'];
            }

//            $task['name'] = $grupedtasks[0]->getEvent()->getName() . ' (' . $start->format('h:i a') . ') ' . $grupedtasks[0]->getLocal()->getName();
            $task['name'] = $grupedtasks[0]->getEvent()->getName() . '. Lugar: ' . $grupedtasks[0]->getLocal()->getName() . '. Hora: ' . $start->format('h:i a');

            $participants = '';
            if (count($task['participants']) > 0) {
                for ($index1 = 0; $index1 < count($task['participants']); $index1++)
                    if ($task['participants'][$index1]->first_name != '' || $task['participants'][$index1]->last_name != '')
                        if ($participants == '')
                            $participants = $task['participants'][$index1]->first_name . ' ' . $task['participants'][$index1]->last_name;
                        else
                            $participants = $participants . ', ' . $task['participants'][$index1]->first_name . ' ' . $task['participants'][$index1]->last_name;
            }
            $task['participants'] = $participants;

            for ($index = 1; $index < count($grupedtasks); $index++) {
                $start = date_create_from_format('Y-m-d H:i:s', $grupedtasks[$index]->getEvent()->getStart());
                $enddate = date_create_from_format('Y-m-d H:i:s', $grupedtasks[$index]->getEvent()->getEnd());


                if ($start->format('n') == $enddate->format('n')) {
                    if ($start->format('j') == $enddate->format('j'))
                        if ($task['initialdates'][$start->format('n')] != '')
                            $task['initialdates'][$start->format('n')] = $task['initialdates'][$start->format('n')] . ', ' . $start->format('j');
                        else
                            $task['initialdates'][$start->format('n')] = $start->format('j');
                    else {
                        if ($task['initialdates'][$start->format('n')] != '')
                            $task['initialdates'][$start->format('n')] = $task['initialdates'][$start->format('n')] . ', ' . $start->format('j') . '-' . $enddate->format('j');
                        else
                            $task['initialdates'][$start->format('n')] = $start->format('j') . '-' . $enddate->format('j');
                    }
                } else {
                    $task['initialdates'][$start->format('n')] = $start->format('j') . '-';
                    $task['initialdates'][$enddate->format('n')] = '-' . $enddate->format('j');
                }
            }

            $this->tasks[] = $task;
        }

        for ($i = 0; $i < count($this->tasks); $i++)
            if ($this->tasks[$i]['parentid'] > 0)
                $this->tasks[$i]['treeid'] = $tasksids[$this->tasks[$i]['parentid']] . '.' . $tasksids[$this->tasks[$i]['id']];
            else
                $this->tasks[$i]['treeid'] = $tasksids[$this->tasks[$i]['id']];

        for ($i = 0; $i < count($this->tasks) - 1; $i++)
            for ($j = $i + 1; $j < count($this->tasks); $j++)
                if ($this->tasks[$i]['treeid'] > $this->tasks[$j]['treeid']) {
                    $aux = $this->tasks[$i];
                    $this->tasks[$i] = $this->tasks[$j];
                    $this->tasks[$j] = $aux;
                }

        $this->year = $planstart->format('Y');
    }

    public function executeReport1summary(sfWebRequest $request) {
        $this->appname = Util::getMetadataValue('app_name');
        $this->headershadow = Util::getMetadataValue('app_headershadow');

        $this->user = Doctrine::getTable('sfGuardUser')->retrieveByUsername($this->getUser()->getUsername());

        $this->userrange = ' ';
        if ($this->user->getPerson()->getPositionid() && $this->user->getPerson()->getPositionid() > 0)
            $this->userrange = $this->user->getPerson()->getPosition()->getName();
        $this->user = $this->user->getFirstName() . ' ' . $this->user->getLastName();

        $this->year = $request->getParameter('year');
        if ($request->getParameter('entity') && strtolower($request->getParameter('entity')) != 'undefined')
            $this->entity = strtoupper($request->getParameter('entity'));
        else {
            $rows = EntityTable::getInstance()->getAllPaged(0, 1);
            $this->entity = strtoupper($rows['data'][0]['name']);
        }

        $q = Doctrine_Query::create()
                ->select('t.*, 
                    (SELECT COUNT(q1.id) FROM Task q1 LEFT JOIN q1.Event e1 ON e1.id = q1.eventid WHERE q1.tasktypeid = t.id AND q1.activitytype = 1 AND q1.activityorigin = 1 AND e1.code NOT LIKE ' . Task::LIKE_COMPARITION_CODE . ') as activityown,
                    (SELECT COUNT(q2.id) FROM Task q2 LEFT JOIN q2.Event e2 ON e2.id = q2.eventid  WHERE q2.tasktypeid = t.id AND q2.activitytype = 1 AND q2.activityorigin = 2 AND e2.code NOT LIKE ' . Task::LIKE_COMPARITION_CODE . ') as activityexternal,
                    (SELECT COUNT(q3.id) FROM Task q3 LEFT JOIN q3.Event e3 ON e3.id = q3.eventid  WHERE q3.tasktypeid = t.id AND q3.activitytype = 2 AND q3.activityorigin = 1 AND e3.code NOT LIKE ' . Task::LIKE_COMPARITION_CODE . ') as insuranceown,
                    (SELECT COUNT(q4.id) FROM Task q4 LEFT JOIN q4.Event e4 ON e4.id = q4.eventid  WHERE q4.tasktypeid = t.id AND q4.activitytype = 2 AND q4.activityorigin = 2 AND e4.code NOT LIKE ' . Task::LIKE_COMPARITION_CODE . ') as insuranceexternal
                    ')
                ->from('Tasktype t')
                ->leftJoin('t.Tasks tks')
                ->leftJoin('tks.Event e')
                ->orderBy('t.name ASC');

        if ($request->getParameter('person') && $request->getParameter('person') != '') {
            $q->addWhere('tks.responsibleid = ?', $request->getParameter('person'));

            $person = Doctrine::getTable('Person')->find($request->getParameter('person'));
            $this->entity = $person->getSfGuardUser()->getFirstName() . ' ' . $person->getSfGuardUser()->getLastName();
        } else {
            $q = $q->leftJoin("tks.Plans p");
            $q->addWhere('p.id = ?', $request->getParameter('plan'));
        }

        $firstday = date_create_from_format('Y-m-d H:i:s', $this->year . '-01-01' . ' 00:00:00');
        $lastday = date_create_from_format('d/m/Y H:i:s', date('d/m/Y', strtotime('last day of ' . $firstday->format('M') . ' ' . $firstday->format('Y'))) . ' 23:59:59');

        $q->addWhere('(e.start >= ? AND e.start <= ?) OR (e.end >= ? AND e.end <= ?) OR (e.start <= ? AND e.end >= ?)', array($firstday->format('Y-m-d H:i:s'), $lastday->format('Y-m-d H:i:s'), $firstday->format('Y-m-d H:i:s'), $lastday->format('Y-m-d H:i:s'), $firstday->format('Y-m-d H:i:s'), $lastday->format('Y-m-d H:i:s')));

        $this->tasktypes = $q->execute()->toArray();
    }

    public function executeReport2(sfWebRequest $request) {
        $this->appname = Util::getMetadataValue('app_name');
        $this->headershadow = Util::getMetadataValue('app_headershadow');

        $this->user = Doctrine::getTable('sfGuardUser')->retrieveByUsername($this->getUser()->getUsername());
        $boos = $this->user->getPerson()->getBoss();


        $this->userrange = ' ';
        if ($this->user->getPerson()->getPositionid() && $this->user->getPerson()->getPositionid() > 0)
            $this->userrange = $this->user->getPerson()->getPosition()->getName();
        $this->user = $this->user->getFirstName() . ' ' . $this->user->getLastName();

        $this->approvalrange = ' ';
        if ($boos->getPositionid() && $boos->getPositionid() > 0)
            $this->approvalrange = $boos->getPosition()->getName();
        $this->approvalperson = $boos->getsfGuardUser()->getFirstName() . ' ' . $boos->getsfGuardUser()->getLastName();

        $this->month = $request->getParameter('monthname') . ' / ' . $request->getParameter('year');

        $plantasks = array();
        $this->megatasks = array();

        if ($request->getParameter('person') && $request->getParameter('person') != '') {
            $person = Doctrine::getTable('Person')->find($request->getParameter('person'));
            $plantasks = Doctrine::getTable('Task')->getArrayForReport(false, $person->getId(), $request->getParameter('year'), $request->getParameter('month'));
        } else {
            $plan = Doctrine::getTable('Plan')->find($request->getParameter('plan'));
            $plantasks = Doctrine::getTable('Task')->getArrayForReport($plan->getId(), false, $request->getParameter('year'), $request->getParameter('month'));
        }

        $tasks = array();
        foreach ($plantasks as $task) {
            $start = date_create_from_format('Y-m-d H:i:s', $task->getEvent()->getStart());
            if (!$tasks[$task->getEvent()->getName() . $task->getPerson()->getId() . $start->format('y')])
                $tasks[$task->getEvent()->getName() . $task->getPerson()->getId() . $start->format('y')] = array();
            $tasks[$task->getEvent()->getName() . $task->getPerson()->getId() . $start->format('y')][] = $task;
        }

        $this->tasks = array();
        foreach ($tasks as $key => $grupedtasks) {
            $start = date_create_from_format('Y-m-d H:i:s', $grupedtasks[0]->getEvent()->getStart());
            $task = $grupedtasks[0]->toArray();
            $task['initialdates'] = array();
            $task['initialdates'][$start->format('n')] = $start->format('d/m/Y');
            $task['responsible'] = $grupedtasks[0]->getPerson()->getSfGuardUser()->getFirstName() . ' ' . $grupedtasks[0]->getPerson()->getSfGuardUser()->getLastName();
            $task['type'] = $grupedtasks[0]->getTasktype()->getName();
            $task['name'] = $grupedtasks[0]->getEvent()->getName();
            $task['local'] = $grupedtasks[0]->getLocal()->getName();
            $task['time'] = $start->format('h:i a');

            $participants = '';
            $task['participants'] = json_decode($grupedtasks[0]->getInheritParticipants());
            if (count($task['participants']) > 0) {
                $participants = $task['participants'][0]->first_name . ' ' . $task['participants'][0]->last_name;
                for ($index1 = 1; $index1 < count($task['participants']); $index1++) {
                    $participants = $participants . ', ' . $task['participants'][$index1]->first_name . ' ' . $task['participants'][0]->last_name;
                }
            }
            $task['participants'] = $participants;

            for ($index = 1; $index < count($grupedtasks); $index++) {
                $start = date_create_from_format('Y-m-d H:i:s', $grupedtasks[$index]->getEvent()->getStart());
                $task['initialdates'][$start->format('n')] = $task['initialdates'][$start->format('n')] . ', ' . $start->format('d/m/Y');
            }

            $this->tasks[] = $task;

            if ($grupedtasks[0]->getIsprincipal())
                $this->megatasks[] = $task;
        }
    }

    public function executeReport2completement(sfWebRequest $request) {
        $this->appname = Util::getMetadataValue('app_name');
        $this->headershadow = Util::getMetadataValue('app_headershadow');

        $this->month = $request->getParameter('monthname') . ' / ' . $request->getParameter('year');

        $this->user = Doctrine::getTable('sfGuardUser')->retrieveByUsername($this->getUser()->getUsername());

        $this->userrange = ' ';
        if ($this->user->getPerson()->getPositionid() && $this->user->getPerson()->getPositionid() > 0)
            $this->userrange = $this->user->getPerson()->getPosition()->getName();
        $this->user = $this->user->getFirstName() . ' ' . $this->user->getLastName();

        $baseline = Doctrine::getTable('Plan')->getBaseLineStadistics('', $request->getParameter('plan'));
        if ($request->getParameter('entity') && strtolower($request->getParameter('entity')) != 'undefined')
            $this->entity = strtoupper($request->getParameter('entity'));
        else {
            $rows = EntityTable::getInstance()->getAllPaged(0, 1);
            $this->entity = strtoupper($rows['data'][0]['name']);
        }

        if ($request->getParameter('person') && $request->getParameter('person') != '') {
            $person = Doctrine::getTable('Person')->find($request->getParameter('person'));
            $this->entity = $person->getSfGuardUser()->getFirstName() . ' ' . $person->getSfGuardUser()->getLastName();
            $baseline = Doctrine::getTable('Plan')->getBaseLineStadistics($request->getParameter('person'));
        }

        $this->newwtasks = array();
        foreach ($baseline['neww'] as $task)
            $this->newwtasks[] = $task['id'];

        $this->equaltasks = array();
        foreach ($baseline['equal'] as $task)
            $this->equaltasks[] = $task['id'];

        $this->planed4month = 0;
        $this->planed4monthcomplete = 0;
        $this->planed4monthincomplete = 0;
        $this->planed4monthsuspended = 0;
        $this->planed4monthown = 0;
        $this->planed4monthexternal = 0;
        $this->extraplan4month = 0;
        $this->extraplan4monthcomplete = 0;
        $this->extraplan4monthown = 0;
        $this->extraplan4monthowncomplete = 0;
        $this->extraplan4monthexternal = 0;
        $this->extraplan4monthexternalcomplete = 0;

        $q = Doctrine_Query::create()
                ->select('ts.*')
                ->from('Taskstatus ts');
        $taskstatues = $q->execute();
        foreach ($taskstatues as $taskstatus) {
            $q = Doctrine_Query::create()
                    ->select('t.*')
                    ->from('Task t')
                    ->leftJoin('t.Taskstatus ts')
                    ->leftJoin('t.Event e')
                    ->where('ts.id = ? AND e.code NOT LIKE ?', array($taskstatus->getId(), '%->%'));
            $q = $this->adjustQuery($q, $request);

            $tasks = $q->execute();
            foreach ($tasks as $task) {
                $currentdate = date_create_from_format('Y-m-d H:i:s', $task->getEvent()->getStart());
                $firstday = date_create_from_format('Y-m-d H:i:s', $request->getParameter('year') . '-' . $request->getParameter('month') . '-01' . ' 00:00:00');
                $lastday = date_create_from_format('d/m/Y H:i:s', date('d/m/Y', strtotime('last day of ' . $firstday->format('M') . ' ' . $firstday->format('Y'))) . ' 23:59:59');
                if (in_array($task->getId(), $this->equaltasks) && $currentdate >= $firstday && $currentdate <= $lastday) {
                    $this->planed4month++;

                    if ($taskstatus->getIscomplete())
                        $this->planed4monthcomplete++;
                    else
                        $this->planed4monthincomplete++;

                    if ($taskstatus->getIssuspended()) {
                        $this->planed4monthsuspended++;
                        $this->planed4monthincomplete -= $q->count();
                    }


                    switch ($task->getActivityorigin()) {
                        case 1:
                            $this->planed4monthown++;
                            break;
                        case 2:
                            $this->planed4monthexternal++;
                            break;
                        default:
                            break;
                    }
                }

                // extra plan tasks
                if (in_array($task->getId(), $this->newwtasks) && $currentdate >= $firstday && $currentdate <= $lastday) {
                    $this->extraplan4month++;
                    if ($taskstatus->getIscomplete())
                        $this->extraplan4monthcomplete++;

                    switch ($task->getActivityorigin()) {
                        case 1:
                            $this->extraplan4monthown++;
                            if ($taskstatus->getIscomplete())
                                $this->extraplan4monthowncomplete++;
                            break;
                        case 2:
                            $this->extraplan4monthexternal++;
                            if ($taskstatus->getIscomplete())
                                $this->extraplan4monthexternalcomplete++;
                            break;
                        default:
                            break;
                    }
                }
            }
        }

        // acumulated ----------------------------------------------------------

        $this->acumulatedplaned4month = 0;
        $this->acumulatedplaned4monthcomplete = 0;
        $this->acumulatedplaned4monthincomplete = 0;
        $this->acumulatedplaned4monthsuspended = 0;
        $this->acumulatedplaned4monthown = 0;
        $this->acumulatedplaned4monthexternal = 0;
        $this->acumulatedextraplan4month = 0;
        $this->acumulatedextraplan4monthcomplete = 0;
        $this->acumulatedextraplan4monthown = 0;
        $this->acumulatedextraplan4monthowncomplete = 0;
        $this->acumulatedextraplan4monthexternal = 0;
        $this->acumulatedextraplan4monthexternalcomplete = 0;

        $realmonth = (int) $request->getParameter('month');

        for ($index = 1; $index < $realmonth; $index++) {
            $month = $index;
            if ($month < 10)
                $month = '0' . $month;

            $request->setParameter('month', $month);
            foreach ($taskstatues as $taskstatus) {

                $q = Doctrine_Query::create()
                        ->select('t.*')
                        ->from('Task t')
                        ->leftJoin('t.Taskstatus ts')
                        ->leftJoin('t.Event e')
                        ->where('ts.id = ? AND e.code NOT LIKE ?', array($taskstatus->getId(), '%->%'));
                $q = $this->adjustQuery($q, $request);

                $tasks = $q->execute();
                foreach ($tasks as $task) {
                    $currentdate = date_create_from_format('Y-m-d H:i:s', $task->getEvent()->getStart());
                    $firstday = date_create_from_format('Y-m-d H:i:s', $request->getParameter('year') . '-' . $request->getParameter('month') . '-01' . ' 00:00:00');
                    $lastday = date_create_from_format('d/m/Y H:i:s', date('d/m/Y', strtotime('last day of ' . $firstday->format('M') . ' ' . $firstday->format('Y'))) . ' 23:59:59');
                    if (in_array($task->getId(), $this->equaltasks) && $currentdate >= $firstday && $currentdate <= $lastday) {
                        $this->acumulatedplaned4month++;

                        if ($taskstatus->getIscomplete())
                            $this->acumulatedplaned4monthcomplete++;
                        else
                            $this->acumulatedplaned4monthincomplete++;

                        if ($taskstatus->getIssuspended()) {
                            $this->acumulatedplaned4monthsuspended++;
                            $this->acumulatedplaned4monthincomplete -= $q->count();
                        }


                        switch ($task->getActivityorigin()) {
                            case 1:
                                $this->acumulatedplaned4monthown++;
                                break;
                            case 2:
                                $this->acumulatedplaned4monthexternal++;
                                break;
                            default:
                                break;
                        }
                    }

                    // extra plan tasks
                    if (in_array($task->getId(), $this->newwtasks) && $currentdate >= $firstday && $currentdate <= $lastday) {
                        $this->acumulatedextraplan4month++;
                        if ($taskstatus->getIscomplete())
                            $this->acumulatedextraplan4monthcomplete++;

                        switch ($task->getActivityorigin()) {
                            case 1:
                                $this->acumulatedextraplan4monthown++;
                                if ($taskstatus->getIscomplete())
                                    $this->acumulatedextraplan4monthowncomplete++;
                                break;
                            case 2:
                                $this->acumulatedextraplan4monthexternal++;
                                if ($taskstatus->getIscomplete())
                                    $this->acumulatedextraplan4monthexternalcomplete++;
                                break;
                            default:
                                break;
                        }
                    }
                }
            }
        }
    }

    public function executeReport2p(sfWebRequest $request) {
        $this->appname = Util::getMetadataValue('app_name');
        $this->headershadow = Util::getMetadataValue('app_headershadow');

        $this->user = Doctrine::getTable('sfGuardUser')->retrieveByUsername($this->getUser()->getUsername());
        $boos = $this->user->getPerson()->getBoss();

        $this->userrange = ' ';
        if ($this->user->getPerson()->getPositionid() && $this->user->getPerson()->getPositionid() > 0)
            $this->userrange = $this->user->getPerson()->getPosition()->getName();
        $this->user = $this->user->getFirstName() . ' ' . $this->user->getLastName();

        $this->approvalrange = ' ';
        if ($boos->getPositionid() && $boos->getPositionid() > 0)
            $this->approvalrange = $boos->getPosition()->getName();
        $this->approvalperson = $boos->getsfGuardUser()->getFirstName() . ' ' . $boos->getsfGuardUser()->getLastName();

        $this->month = $request->getParameter('monthname') . ' / ' . $request->getParameter('year');

        $plantasks = array();

        if ($request->getParameter('entity') && strtolower($request->getParameter('entity')) != 'undefined')
            $this->entity = strtoupper($request->getParameter('entity'));
        else {
            $rows = EntityTable::getInstance()->getAllPaged(0, 1);
            $this->entity = strtoupper($rows['data'][0]['name']);
        }

        if ($request->getParameter('person') && $request->getParameter('person') != '') {
            $person = Doctrine::getTable('Person')->find($request->getParameter('person'));
            $this->entity = $person->getSfGuardUser()->getFirstName() . ' ' . $person->getSfGuardUser()->getLastName();

            $plantasks = Doctrine::getTable('Task')->getArrayForReport(false, $person->getId(), $request->getParameter('year'), $request->getParameter('month'));
            $baseline = Doctrine::getTable('Plan')->getBaseLineStadistics($request->getParameter('person'));
        } else {
            $plan = Doctrine::getTable('Plan')->find($request->getParameter('plan'));
            $plantasks = Doctrine::getTable('Task')->getArrayForReport($plan->getId(), false, $request->getParameter('year'), $request->getParameter('month'));
            $baseline = Doctrine::getTable('Plan')->getBaseLineStadistics('', $request->getParameter('plan'));
        }

        $temp = array();
        $baseline = array_merge($baseline['diff'], $baseline['neww']);
        foreach ($baseline as $task)
            $temp[$task['id']] = $task;
        $baseline = $temp;

        $tasks = array();
        foreach ($plantasks as $task) {
            $start = date_create_from_format('Y-m-d H:i:s', $task->getEvent()->getStart());
            if ($baseline[$task->getId()]) {
                if (!$tasks[$task->getEvent()->getName() . $task->getPerson()->getId() . $start->format('y')])
                    $tasks[$task->getEvent()->getName() . $task->getPerson()->getId() . $start->format('y')] = array();
                $tasks[$task->getEvent()->getName() . $task->getPerson()->getId() . $start->format('y')][] = $task;
            }
        }


        $this->tasks = array();
        foreach ($tasks as $grupedtasks) {
            $start = date_create_from_format('Y-m-d H:i:s', $grupedtasks[0]->getEvent()->getStart());

            $task = $grupedtasks[0]->toArray();
            $task['initialdates'] = array();

            $task['participants'] = json_decode($grupedtasks[0]->getInheritParticipants());
            if (count($task['participants']) < 1)
                $task['participants'] = json_decode($grupedtasks[0]->getMultipart()->getParticipants());

            if ($baseline[$task['id']] && $baseline[$task['id']]['startorginal'] != '') {
                $startbefore = date_create_from_format('Y-m-d H:i:s', $baseline[$task['id']]['startorginal']);
                $task['startorginal'][$startbefore->format('n')] = $startbefore->format('d/m/Y h:i a');
            }
            $task['initialdates'][$start->format('n')] = $start->format('d/m/Y h:i a');

            $task['responsible'] = $grupedtasks[0]->getPerson()->getSfGuardUser()->getFirstName() . ' ' . $grupedtasks[0]->getPerson()->getSfGuardUser()->getLastName();

            $task['type'] = $grupedtasks[0]->getTasktype()->getName();
            $ttt = $grupedtasks[0]->getTasktype();
            while ($ttt->getParentid() > 0) {
                $ttt = $ttt->getTasktype();
                $task['type'] = $ttt->getName() . '|stringsplitter|' . $task['type'];
            }

            $task['name'] = $grupedtasks[0]->getEvent()->getName();

            $participants = '';
            if (count($task['participants']) > 0) {
                $participants = $task['participants'][0]->first_name . ' ' . $task['participants'][0]->last_name;
                for ($index1 = 1; $index1 < count($task['participants']); $index1++) {
                    $participants = $participants . ', ' . $task['participants'][$index1]->first_name . ' ' . $task['participants'][0]->last_name;
                }
            }
            $task['participants'] = $participants;

            for ($index = 1; $index < count($grupedtasks); $index++) {
                $start = date_create_from_format('Y-m-d H:i:s', $grupedtasks[$index]->getEvent()->getStart());
                $task['initialdates'][$start->format('n')] = $task['initialdates'][$start->format('n')] . ', ' . $start->format('d/m/Y');
            }

            $this->tasks[] = $task;
        }
    }

    public function executeReport3(sfWebRequest $request) {
        $this->appname = Util::getMetadataValue('app_name');
        $this->headershadow = Util::getMetadataValue('app_headershadow');

        $this->user = Doctrine::getTable('sfGuardUser')->retrieveByUsername($this->getUser()->getUsername());
        $boos = $this->user->getPerson()->getBoss();

        $this->userrange = ' ';
        if ($this->user->getPerson()->getPositionid() && $this->user->getPerson()->getPositionid() > 0)
            $this->userrange = $this->user->getPerson()->getPosition()->getName();
        $this->user = $this->user->getFirstName() . ' ' . $this->user->getLastName();

        $this->approvalrange = ' ';
        if ($boos->getPositionid() && $boos->getPositionid() > 0)
            $this->approvalrange = $boos->getPosition()->getName();
        $this->approvalperson = $boos->getsfGuardUser()->getFirstName() . ' ' . $boos->getsfGuardUser()->getLastName();

        $this->month = $request->getParameter('monthname') . ' / ' . $request->getParameter('year');
        $start = date_create_from_format('Y-m-d', $request->getParameter('year') . '-' . $request->getParameter('month') . '-01');

        $planmonthfirstday = date('d/m/Y', strtotime('first day of ' . $start->format('M') . ' ' . $start->format('Y')));
        $planmonthfirstday = date_create_from_format('d/m/Y', $planmonthfirstday);

        $planmonthlastday = date('d/m/Y', strtotime('last day of ' . $start->format('M') . ' ' . $start->format('Y')));
        $planmonthlastday = date_create_from_format('d/m/Y', $planmonthlastday);

        $megatasksids = array();
        $this->megatasks = array();
        $tasks = array();
        $schedule = false;

        $entityid = false;
        if ($request->getParameter('entityid') && strtolower($request->getParameter('entityid')) != 'undefined')
            $entityid = $request->getParameter('entityid');

        if ($request->getParameter('person') && $request->getParameter('person') != '') {
            $person = Doctrine::getTable('Person')->find($request->getParameter('person'));
            $schedule = $person->getProfileSchedule($entityid);
        } else {
            $schedule = Doctrine::getTable('Schedule')->getActiveSchedule($entityid);
            $schedule = $schedule[0];
        }
        $this->schedule = $schedule->getName();

        while ($planmonthfirstday <= $planmonthlastday) {
            if (!$tasks[$planmonthfirstday->format('W')])
                $tasks[$planmonthfirstday->format('W')] = array();
            if (!$tasks[$planmonthfirstday->format('W')][$planmonthfirstday->format('D')])
                $tasks[$planmonthfirstday->format('W')][$planmonthfirstday->format('D')] = array();
            if (!$tasks[$planmonthfirstday->format('W')][$planmonthfirstday->format('D')]['day'])
                $tasks[$planmonthfirstday->format('W')][$planmonthfirstday->format('D')]['day'] = $planmonthfirstday->format('d');


            $init = $planmonthfirstday->format('Y-m-d') . ' 00:00:00';
            $end = $planmonthfirstday->format('Y-m-d') . ' 23:59:59';

            $tasksquery = Doctrine_Query::create()
                    ->select('e.*')
                    ->from('Event e')
                    ->leftJoin("e.Task t")
                    ->leftJoin("t.Plans p")
                    ->leftJoin("t.Tasktype tt")
                    ->leftJoin("t.Taskstatus ts")
                    ->where(Task::getExcludeInvitationSubQuery() . ' < 1')
                    ->andWhere('(e.start >= ? AND e.start <= ?) OR (e.end >= ? AND e.end <= ?) OR (e.start <= ? AND e.end >= ?)', array($init, $end, $init, $end, $init, $end))
                    ->andWhere('e.code NOT LIKE ' . Task::LIKE_COMPARITION_CODE);
            if ($request->getParameter('person') && $request->getParameter('person') != '')
                $tasksquery = $tasksquery->addWhere('t.responsibleid = ?', $request->getParameter('person'));
            else
                $tasksquery = $tasksquery->addWhere('p.id = ?', $request->getParameter('plan'));
            $parentquery = $tasksquery->addWhere('t.parentid is NULL');


            $currenttasks = $tasksquery->execute();
            foreach ($currenttasks as $value)
                if ($value->getTask()->getIsprincipal())
                    $this->megatasks[] = $value->toArray();

            $tasks[$planmonthfirstday->format('W')][$planmonthfirstday->format('D')]['tasks'] = $currenttasks->toArray();

            for ($index = 0; $index < count($tasks[$planmonthfirstday->format('W')][$planmonthfirstday->format('D')]['tasks']); $index++) {
                $datetovalid = date_create_from_format('Y-m-d H:i:s', $tasks[$planmonthfirstday->format('W')][$planmonthfirstday->format('D')]['tasks'][$index]['start']);
                if ($schedule->isValidDate($datetovalid) == false)
                    $tasks[$planmonthfirstday->format('W')][$planmonthfirstday->format('D')]['tasks'][$index]['name'] = '* ' . $tasks[$planmonthfirstday->format('W')][$planmonthfirstday->format('D')]['tasks'][$index]['name'];
            }


            $parents = $parentquery->execute();
            foreach ($parents as $pt)
                if (count($pt->getTask()->getTasks()) > 0 && !in_array($pt->getId(), $megatasksids)) {
                    $megatasksids[] = $pt->getId();
                    $megatasks[] = $pt->toArray();
                }

            $planmonthfirstday->add(new DateInterval('P1D'));
        }

        $this->tasks = $tasks;
    }

    public function executeReportCompletement(sfWebRequest $request) {
        $this->appname = Util::getMetadataValue('app_name');
        $this->headershadow = Util::getMetadataValue('app_headershadow');

        $hosturl = 'http' . ($request->isSecure() ? 's' : '') . '://' . $request->getHost();

        $this->month = $request->getParameter('monthname') . ' / ' . $request->getParameter('year');

        $this->user = Doctrine::getTable('sfGuardUser')->retrieveByUsername($this->getUser()->getUsername());
        $boos = $this->user->getPerson()->getBoss();


        $this->userrange = ' ';
        if ($this->user->getPerson()->getPositionid() && $this->user->getPerson()->getPositionid() > 0)
            $this->userrange = $this->user->getPerson()->getPosition()->getName();
        $this->user = $this->user->getFirstName() . ' ' . $this->user->getLastName();

        $this->approvalrange = ' ';
        if ($boos->getPositionid() && $boos->getPositionid() > 0)
            $this->approvalrange = $boos->getPosition()->getName();
        $this->approvalperson = $boos->getsfGuardUser()->getFirstName() . ' ' . $boos->getsfGuardUser()->getLastName();

        if ($request->getParameter('person') && $request->getParameter('person') != '') {
            $person = Doctrine::getTable('Person')->find($request->getParameter('person'));
            $this->entity = $person->getSfGuardUser()->getFirstName() . ' ' . $person->getSfGuardUser()->getLastName();
        }

        $this->total = 0;
        $this->complete = 0;
        $this->incomplete = 0;
        $this->suspended = 0;

        $this->incompletetasks = array();
        $this->suspendedtasks = array();


        $q = Doctrine_Query::create()
                ->select('ts.*')
                ->from('Taskstatus ts');
        $taskstatues = $q->execute();
        foreach ($taskstatues as $taskstatus) {
            $q = Doctrine_Query::create()
                    ->select('t.*')
                    ->from('Task t')
                    ->leftJoin('t.Taskstatus ts')
                    ->leftJoin('t.Event e')
                    ->where('ts.id = ? AND e.code NOT LIKE ?', array($taskstatus->getId(), '%->%'));

            $q = $this->adjustQuery($q, $request);

            $this->total += $q->count();

            $tasks = $q->execute();

            if ($taskstatus->getIssuspended()) {
                $this->suspended += $q->count();
                foreach ($tasks as $task) {
                    $this->suspendedtasks[] = array(
                        'name' => $task->getEvent()->getName(),
                        'responsible' => $task->getPerson()->getFullName(),
                        'creator' => $task->getCreator()->getFullName()
                    );
                }
            }

            if ($taskstatus->getIscomplete())
                $this->complete += $q->count();
            else {
                $this->incomplete += $q->count();
                foreach ($tasks as $task) {
                    $this->incompletetasks[] = array(
                        'name' => $task->getEvent()->getName(),
                        'responsible' => $task->getPerson()->getFullName(),
                        'creator' => $task->getCreator()->getFullName()
                    );
                }
            }
        }

        if ($request->getParameter('extra') == 'yes') {
            // para tabla y grafico de "estados en el sistema"
            $q = Doctrine_Query::create()
                    ->select('c.*, ts.*, t.*, COUNT(t.taskstatusid) AS val')
                    ->from('Calendar c')
                    ->leftJoin('c.Taskstatus ts')
                    ->leftJoin('ts.Tasks t')
                    ->leftJoin("t.Event e")
                    ->where('e.code NOT LIKE ?', '%->%')
                    ->groupBy('t.taskstatusid');

            $q = $this->adjustQuery($q, $request);

            $this->statues = $q->fetchArray();

            $this->statuestotal = 0;
            $this->megatasks = array();
            $pievalues = array();
            $pielegends = array();
            foreach ($this->statues as $value) {
                $pievalues[] = $value['val'];
                $pielegends[] = $value['name'];

                $this->statuestotal += $value['val'];

                $calendar = Doctrine::getTable('Calendar')->find($value['id']);

                if ($calendar && count($calendar->getTaskstatus()) > 0) {
                    $st = $calendar->getTaskstatus();
                    if (is_array($st))
                        $st = $st[0];
                    if ($st->isFinal()) {
                        $q = Doctrine_Query::create()
                                ->select('e.*')
                                ->from('Event e')
                                ->leftJoin('e.Task t')
                                ->leftJoin('t.Taskstatus ts')
                                ->leftJoin("t.Plans p")
                                ->where('t.parentid is NULL AND ts.id = ?', $st->getId())
                                ->limit(2);

                        if ($request->getParameter('person') && $request->getParameter('person') != '')
                            $q = $q->addWhere('t.responsibleid = ?', $request->getParameter('person'));
                        else
                            $q = $q->addWhere('p.id = ?', $request->getParameter('plan'));

                        $this->megatasks = array_merge($this->megatasks, $q->execute()->toArray());
                    }
                }
            }
            $this->piegraph1url = $hosturl . '/print/piegraph.php?data=' . json_encode($pievalues) . '&legend=' . json_encode($pielegends);

            // para tabla y grafico de "tiempo"
            if ($request->getParameter('person') && $request->getParameter('person') != '') {
                $this->piegraph6url = $hosturl . '/print/piegraph.php?data=' . json_encode(array($this->complete, $this->incomplete, $this->suspended)) . '&legend=' . json_encode(array('Cumplidas', 'Incumplidas', 'Suspendidas'));

                $this->datedstatuestotal = 0;
                $pievalues = array();
                $pielegends = array();
                $summary = TaskTable::getInstance()->getSummary($request->getParameter('person'));
                $summary = $summary['data'];

                foreach ($summary as $key => $summaryitem) {
                    $name = $summaryitem['name'];
                    $name = str_replace('task.inprogress.title', 'En curso', $name);
                    $name = str_replace('task.expired.title', 'Vencidas', $name);
                    $name = str_replace('task.outoftime.title', 'Fuera de tiempo', $name);
                    $name = str_replace('task.ontime.title', 'A tiempo', $name);
                    $name = str_replace('task.future.title', 'Por venir', $name);
                    $summaryitem['name'] = $name;
                    $summary[$key] = $summaryitem;
                }

                foreach ($summary as $summaryitem) {
                    $this->datedstatuestotal += $summaryitem['amount'];
                    $pievalues[] = $summaryitem['amount'];
                    $pielegends[] = $summaryitem['name'];
                }
                $this->datedstatues = $summary;
                $this->piegraph2url = $hosturl . '/print/piegraph.php?data=' . json_encode($pievalues) . '&legend=' . json_encode($pielegends);
            }


            // para tabla y grafico de "tipos"
            $query = Doctrine_Query::create()
                    ->select('t.*, tt.*, COUNT(t.id) AS val')
                    ->from('Task t')
                    ->leftJoin('t.Tasktype tt')
                    ->leftJoin("t.Event e")
                    ->where('e.code NOT LIKE ?', '%->%')
                    ->groupBy('t.tasktypeid');
            $query = $this->adjustQuery($query, $request);

            $types = $query->fetchArray();
            $this->tasktypestotal = 0;
            $pievalues = array();
            $pielegends = array();
            $this->tasktypes = array();
            for ($index = 0; $index < count($types); $index++) {
                $pievalues[] = $types[$index]['val'];
                $this->tasktypestotal += $types[$index]['val'];
                $name = $types[$index]['Tasktype']['name'];
                $pielegends[] = $name;
                $this->tasktypes[] = array(
                    'name' => $name,
                    'amount' => $types[$index]['val']
                );
            }
            $this->piegraph3url = $hosturl . '/print/piegraph.php?data=' . json_encode($pievalues) . '&legend=' . json_encode($pielegends);


            // para tabla y grafico de "locales"
            $query = Doctrine_Query::create()
                    ->select('t.*, l.*, COUNT(t.id) AS val')
                    ->from('Task t')
                    ->leftJoin('t.Local l')
                    ->leftJoin("t.Event e")
                    ->where('e.code NOT LIKE ?', '%->%')
                    ->groupBy('t.localid');
            $query = $this->adjustQuery($query, $request);

            $locals = $query->fetchArray();
            $this->localstotal = 0;
            $pievalues = array();
            $pielegends = array();
            $this->locals = array();
            for ($index = 0; $index < count($locals); $index++) {
                $pievalues[] = $locals[$index]['val'];
                $this->localstotal += $locals[$index]['val'];
                $name = $locals[$index]['Local']['name'];
                $pielegends[] = $name;
                $this->locals[] = array(
                    'name' => $name,
                    'amount' => $locals[$index]['val']
                );
            }
            $this->piegraph4url = $hosturl . '/print/piegraph.php?data=' . json_encode($pievalues) . '&legend=' . json_encode($pielegends);

            // para tabla y grafico de "linea base"
            $baseline = array();
            if ($request->getParameter('person') && $request->getParameter('person') != '')
                $baseline = Doctrine::getTable('Plan')->getBaseLineStadistics($request->getParameter('person'));
            else
                $baseline = Doctrine::getTable('Plan')->getBaseLineStadistics('', $request->getParameter('plan'));

            $this->difftasks = $baseline['diff'];
            $this->newwtasks = $baseline['neww'];

            $this->baselinetotal = 0;
            $pievalues = array();
            $pielegends = array();
            $this->baseline = array();
            foreach ($baseline as $key => $value) {
                $name = $key;
                $name = str_replace('equal', 'Sin variación', $name);
                $name = str_replace('diff', 'Modificadas', $name);
                $name = str_replace('neww', 'Nuevas', $name);

                $pielegends[] = $name;
                $pievalues[] = count($value);
                $this->baselinetotal += count($value);
                $this->baseline[] = array(
                    'name' => $name,
                    'amount' => count($value)
                );
            }
            $this->piegraph5url = $hosturl . '/print/piegraph.php?data=' . json_encode($pievalues) . '&legend=' . json_encode($pielegends);
        }
    }

    private function adjustQuery($q, $request) {
        if ($request->getParameter('person') && $request->getParameter('person') != '')
            $q->addWhere('t.responsibleid = ?', $request->getParameter('person'));

        if ($request->getParameter('plan') && $request->getParameter('plan') != '') {
            $q = $q->leftJoin("t.Plans p");
            $q->addWhere('p.id = ?', $request->getParameter('plan'));
        }

        $firstday = date_create_from_format('Y-m-d H:i:s', $request->getParameter('year') . '-' . $request->getParameter('month') . '-01' . ' 00:00:00');
        $lastday = date_create_from_format('d/m/Y H:i:s', date('d/m/Y', strtotime('last day of ' . $firstday->format('M') . ' ' . $firstday->format('Y'))) . ' 23:59:59');

        $q->addWhere('(e.start >= ? AND e.start <= ?) OR (e.end >= ? AND e.end <= ?) OR (e.start <= ? AND e.end >= ?)', array($firstday->format('Y-m-d H:i:s'), $lastday->format('Y-m-d H:i:s'), $firstday->format('Y-m-d H:i:s'), $lastday->format('Y-m-d H:i:s'), $firstday->format('Y-m-d H:i:s'), $lastday->format('Y-m-d H:i:s')));

        return $q;
    }

}
